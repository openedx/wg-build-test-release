<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.21.2 -->
<document source="/Users/sarinacanelake/openedx/edx-platform/docs/concepts/frontend/javascript.rst" translation_progress="{'total': 0, 'translated': 0}" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:http="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <section ids="javascript-in-edx-platform" names="javascript\ in\ edx-platform">
        <title>JavaScript in edx-platform</title>
        <paragraph>All frontend code (JavaScript) has been deprecated in edx-platform, in favor of
            MFEs. See ADR 0023-frontend-code-and-eslint-removal.rst for details.</paragraph>
        <paragraph>This documentation is being left in place until all of the JavaScript code
            has been removed.</paragraph>
        <section ids="es2015" names="es2015">
            <title>ES2015</title>
            <paragraph>All JavaScript code in edx-platform should be written in ES2015.
                ES2015 is not a framework or library – rather, it is the latest and
                greatest revision of the JavaScript language itself, natively supported
                in all modern browsers and engines. Think of it as JavaScript’s
                equivalent to Python 3. ES2015 brings with it number of wonderful
                syntactic features, such as classes, native imports, arrow functions,
                and new data structures. To learn more about ES2015, check out <reference name="Luke Hoban's comprehensive ES6 Features repo" refuri="https://github.com/lukehoban/es6features">Luke
                    Hoban’s comprehensive ES6 Features
                    repo</reference>.</paragraph>
            <paragraph>Although ES2015 is natively supported in modern browsers, older browsers
                can’t interpret it. Here at edX, we support the two latest versions of
                every browser, plus IE11, so we need to do a little extra work to
                support ES2015. This is where Webpack and Babel come in. Webpack is a
                module bundler that transforms, minifies, and compiles frontend code
                into pre-built “bundles” to include within pages. It works together with
                Babel to transpile ES2015 code into ES5 code, which can safely be used
                in all browsers.</paragraph>
            <paragraph>Fortunately, you don’t need to worry about the gritty details of Webpack
                in order to write ES2015 code. You just need to make sure Webpack knows
                where to find your files. It’s also important to note that <strong>Webpack is
                    not compatible with RequireJS</strong>. Work is currently underway to move all
                legacy RequireJS modules into Webpack, but until it is complete, you
                will need to update legacy code yourself in order to use it with ES2015.</paragraph>
            <section ids="adding-a-new-es2015-module" names="adding\ a\ new\ es2015\ module">
                <title>Adding a New ES2015 Module</title>
                <paragraph>Don’t mix ES2015 and ES5 modules within directories. If necessary,
                    create a new directory just for your new file.</paragraph>
                <paragraph>Give your new file an UpperCamelCase filename, such as
                    <literal>MyAwesomeModule.js</literal>. If it is a React module, use the <literal>.jsx</literal>
                    extension; otherwise, use the <literal>.js</literal> extension.</paragraph>
                <paragraph>If you intend to include this module itself directly within a page, you
                    will need to tell Webpack about it. Add a line to the <literal>entry</literal> object
                    within <literal>webpack.common.config.js</literal>.</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">'MyAwesomeModule': 'path/to/your/directory/MyAwesomeModule.js',</literal_block>
                <paragraph>The new entry’s key should be the name of your module (typically this is
                    the same as your filename), and its value should be the path to your
                    file relative to the edx-platform root.</paragraph>
            </section>
            <section ids="writing-your-file" names="writing\ your\ file">
                <title>Writing Your File</title>
                <paragraph>Structure your module using <literal>class</literal>es. Typically, you’ll want to
                    define and export one <literal>class</literal> per file. If you are going to be
                    including this module directly within a page and passing it through
                    Webpack, use a non-default export. <literal>MyAwesomeModule.js</literal> should look
                    something like this:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">export class MyAwesomeModule {
  // your awesome code here
}</literal_block>
                <paragraph>Use two-space indentation. This is industry standard practice for
                    ES2015. If you need to pull in external dependencies, use <literal>import</literal>
                    statements:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">import moment from 'moment';
import 'jquery.cookie';
import { MyOtherModule } from './MyOtherModule';</literal_block>
            </section>
            <section ids="building-your-file" names="building\ your\ file">
                <title>Building Your File</title>
                <paragraph>Devstack comes with two watcher containers specifically for building
                    assets. They compile frontend files very quickly, so you can see your
                    changes reflected in a browser almost immediately. You can run these
                    containers with:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">make dev.up.watchers</literal_block>
                <paragraph>and stop them with</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">make stop.watchers</literal_block>
                <paragraph>If you make any changes to <literal>webpack.common.config.js</literal> while the
                    watchers are running, you will need to restart the watchers in order for
                    them to pick up your changes.</paragraph>
                <paragraph>If your changes aren’t being reflected in the browser, check the logs
                    with <literal>make logs</literal> to see if something went wrong. If you get stuck, ask
                    for help in the FedX hipchat room, or in #front-end on Slack.</paragraph>
            </section>
        </section>
    </section>
</document>
