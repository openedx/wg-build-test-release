<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.21.2 -->
<document source="/Users/sarinacanelake/openedx/edx-platform/docs/references/docs/scripts/user_retirement/docs/special_cases.rst" translation_progress="{'total': 0, 'translated': 0}" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:http="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="handling-special-cases"></target>
    <section ids="handling-special-cases id1" names="handling\ special\ cases handling-special-cases">
        <title>Handling Special Cases</title>
        <target refid="recovering-from-errored"></target>
        <section ids="recovering-from-errored id2" names="recovering\ from\ errored recovering-from-errored">
            <title>Recovering from ERRORED</title>
            <paragraph>If a retirement API indicates failure (4xx or 5xx status code), the driver
                immediately sets the user’s state to <literal>ERRORED</literal>.  To debug this error state,
                check the <literal>responses</literal> field in the user’s row in
                <literal>user_api_userretirementstatus</literal> (User Retirement Status) for any relevant
                logging. Once the issue is resolved, you need to manually set the user’s
                <literal>current_state</literal> to the state immediately prior to the state which should be
                re-tried.  You can do this using the Django admin. In this example, a user
                retirement errored during forums retirement, so we manually reset their state
                from <literal>ERRORED</literal> to <literal>ENROLLMENTS_COMPLETE</literal>.</paragraph>
            <graphviz align="center" code=' digraph G {&#10;   //rankdir=LR;  // Rank Direction Left to Right&#10;   ranksep = "0.3";&#10;&#10;   edge[color=grey]&#10;&#10;   node[fontname=Courier,fontsize=12,shape=box,group=main]&#10;   { rank = same INIT[style=invis] PENDING }&#10;   {&#10;       edge[style=bold,color=black]&#10;       INIT -&gt; PENDING;&#10;       "..."[shape=none]&#10;       PENDING -&gt; RETIRING_ENROLLMENTS -&gt; ENROLLMENTS_COMPLETE -&gt; RETIRING_FORUMS;&#10;   }&#10;   RETIRING_FORUMS -&gt; FORUMS_COMPLETE -&gt; "..." -&gt; COMPLETE&#10;&#10;   node[group=""];&#10;   RETIRING_ENROLLMENTS -&gt; ERRORED;&#10;   RETIRING_FORUMS -&gt; ERRORED[style=bold,color=black];&#10;   PENDING -&gt; ABORTED;&#10;&#10;   subgraph cluster_terminal_states {&#10;       label = "Terminal States";&#10;       labelloc = b  // put label at bottom&#10;       {rank = same ERRORED COMPLETE ABORTED}&#10;   }&#10;&#10;   ERRORED -&gt; ENROLLMENTS_COMPLETE[style="bold,dashed",color=black,label=" via django\nadmin"]&#10; }' options="{'docname': 'references/docs/scripts/user_retirement/docs/special_cases'}">
            </graphviz>
            <paragraph>Now, the user retirement driver scripts will automatically resume this user’s
                retirement the next time they are executed.</paragraph>
        </section>
        <section ids="rerunning-some-or-all-states" names="rerunning\ some\ or\ all\ states">
            <title>Rerunning some or all states</title>
            <paragraph>If you decide you want to rerun all retirements from the beginning, set
                <literal>current_state</literal> to <literal>PENDING</literal> for all retirements with <literal>current_state</literal> ==
                <literal>COMPLETE</literal>.  This would be useful in the case where a new stage in the user
                retirement workflow is added after running all retirements (but before the
                retirement queue is cleaned up), and you want to run all the retirements
                through the new stage.  Or, perhaps you were developing a stage/API that
                didn’t work correctly but still indicated success, so the pipeline progressed
                all users into <literal>COMPLETED</literal>.  Retirement APIs are designed to be idempotent,
                so this should be a no-op for stages already run for a given user.</paragraph>
        </section>
        <section ids="cancelling-a-retirement" names="cancelling\ a\ retirement">
            <title>Cancelling a retirement</title>
            <paragraph>Users who have recently requested account deletion but are still in the
                <literal>PENDING</literal> retirement state may request to rescind their account deletion by
                emailing or otherwise contacting the administrators directly.  edx-platform
                offers a Django management command that administrators can invoke manually to
                cancel a retirement, given the user’s email address.  It restores a given
                user’s login capabilities and removes them from all retirement queues.  The
                syntax is as follows:</paragraph>
            <literal_block force="False" highlight_args="{}" language="bash" linenos="False" xml:space="preserve">$ ./manage.py lms --settings=&lt;your-settings&gt; cancel_user_retirement_request &lt;email-of-user-to-cancel-retirement&gt;</literal_block>
            <paragraph>Keep in mind, this will only work for users which have not had their retirement
                states advance beyond <literal>PENDING</literal>. Additionally, the user will need to reset
                their password in order to restore access to their account.</paragraph>
        </section>
    </section>
</document>
