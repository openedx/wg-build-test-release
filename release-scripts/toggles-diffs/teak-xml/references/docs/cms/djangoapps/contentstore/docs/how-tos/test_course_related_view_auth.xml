<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.21.2 -->
<document source="/Users/sarinacanelake/openedx/edx-platform/docs/references/docs/cms/djangoapps/contentstore/docs/how-tos/test_course_related_view_auth.rst" translation_progress="{'total': 0, 'translated': 0}" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:http="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <section ids="how-to-test-view-auth-for-course-related-views" names="how\ to\ test\ view\ auth\ for\ course-related\ views">
        <title>How to test View Auth for course-related views</title>
        <section ids="what-to-test" names="what\ to\ test">
            <title>What to test</title>
            <paragraph>Each view endpoint that exposes an internal API endpoint - like in files in the rest_api folder - must
                be tested for the following.</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Only authenticated users can access the endpoint.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Only users with the correct permissions (authorization) can access the endpoint.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>All data and params that are part of the request are properly validated.</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="how-to-test" names="how\ to\ test">
            <title>How to test</title>
            <paragraph>The <title_reference>AuthorizeStaffTestCase</title_reference> class provides a set of tests that can be used to test the authorization
                of a view. If you inherit from this class, these tests will be automatically run. For details,
                please look at the source code of the <title_reference>AuthorizeStaffTestCase</title_reference> class.</paragraph>
            <paragraph>A lot of these tests can be easily implemented by inheriting from the <title_reference>AuthorizeStaffTestCase</title_reference>.
                This parent class assumes that the view is for a specific course and that only users who have access
                to the course can access the view. (They are either staff or instructors for the course, or global admin).</paragraph>
            <paragraph>Here is an example of how to test a view that requires a user to be authenticated and have access to a course.</paragraph>
            <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">from cms.djangoapps.contentstore.tests.test_utils import AuthorizeStaffTestCase
from django.test import TestCase
from xmodule.modulestore.tests.django_utils import ModuleStoreTestCase
from django.urls import reverse

class TestMyGetView(AuthorizeStaffTestCase, ModuleStoreTestCase, TestCase):
    def make_request(self, course_id=None, data=None):
        url = self.get_url(self.course.id)
        response = self.client.get(url, data)
        return response

    def get_url(self, course_key):
        url = reverse(
            'cms.djangoapps.contentstore:v0:my_get_view',
            kwargs={'course_id': self.course.id}
        )
        return url</literal_block>
            <paragraph>As you can see, you need to inherit from <title_reference>AuthorizeStaffTestCase</title_reference> and <title_reference>ModuleStoreTestCase</title_reference>, and then either
                <title_reference>TestCase</title_reference> or <title_reference>APITestCase</title_reference> depending on the type of view you are testing. For cookie-based
                authentication, <title_reference>TestCase</title_reference> is sufficient, for Oauth2 use <title_reference>ApiTestCase</title_reference>.</paragraph>
            <paragraph>The only two methods you need to implement are <title_reference>make_request</title_reference> and <title_reference>get_url</title_reference>. The <title_reference>make_request</title_reference> method
                should make the request to the view and return the response. The <title_reference>get_url</title_reference> method should return the URL
                for the view you are testing.</paragraph>
        </section>
        <section ids="overwriting-tests" names="overwriting\ tests">
            <title>Overwriting Tests</title>
            <paragraph>If you need different behavior you can overwrite the tests from the parent class.
                For example, if students should have access to the view, simply implement the
                <title_reference>test_student</title_reference> method in your test class.</paragraph>
        </section>
        <section ids="adding-other-tests" names="adding\ other\ tests">
            <title>Adding other tests</title>
            <paragraph>If you want to test other things in the view - let’s say validation -
                it’s easy to just add another <title_reference>test_…</title_reference> function to your test class
                and you can use the <title_reference>make_request</title_reference> method to make the request.</paragraph>
        </section>
    </section>
</document>
