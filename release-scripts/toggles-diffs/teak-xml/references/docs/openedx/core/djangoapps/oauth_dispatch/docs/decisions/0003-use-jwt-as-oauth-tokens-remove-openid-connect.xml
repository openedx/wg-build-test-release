<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.21.2 -->
<document source="/Users/sarinacanelake/openedx/edx-platform/docs/references/docs/openedx/core/djangoapps/oauth_dispatch/docs/decisions/0003-use-jwt-as-oauth-tokens-remove-openid-connect.rst" translation_progress="{'total': 0, 'translated': 0}" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:http="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <section ids="use-jwt-as-oauth2-tokens-remove-openid-connect" names="3.\ use\ jwt\ as\ oauth2\ tokens;\ remove\ openid\ connect">
        <title>3. Use JWT as OAuth2 Tokens; Remove OpenID Connect</title>
    </section>
    <section ids="status" names="status">
        <title>Status</title>
        <paragraph>Accepted</paragraph>
    </section>
    <section ids="context" names="context">
        <title>Context</title>
        <paragraph>The edX system has external OAuth2 client applications, including edX Mobile apps
            and external partner services. In addition, there are multiple edX microservices
            that are OAuth2 Clients of the LMS.</paragraph>
        <paragraph>Some of the internal microservice clients require <reference name="OpenID Connect" refuri="http://openid.net/connect/">OpenID Connect</reference> features.
            Specifically, they make use of the <reference name="ID Token" refuri="http://openid.net/specs/openid-connect-core-1_0.html#IDToken">ID Token</reference> extension to get user profile
            details from the LMS via the OAuth protocol. The ID Token can also be forwarded
            from one microservice to another, allowing the recipient microservice to
            validate the identity of the token’s owner without needing to reconnect with a
            centralized LMS.</paragraph>
        <paragraph>We have integrated our fork of <reference name="DOP" refuri="https://github.com/caffeinehit/django-oauth2-provider">DOP</reference> with support for OpenID Connect. So, an
            access_token request with a DOP client:</paragraph>
        <literal_block force="False" language="default" linenos="False" xml:space="preserve">curl -X POST -d "client_id=abc&amp;client_secret=def&amp;grant_type=client_credentials" http://localhost:18000/oauth2/access_token/</literal_block>
        <paragraph>includes an id_token field:</paragraph>
        <literal_block force="False" language="default" linenos="False" xml:space="preserve">{
    "access_token": &lt;RANDOMLY-GENERATED-ACCESS-TOKEN&gt;,
    "id_token": &lt;BASE64-ENCODED-ID-TOKEN&gt;,
    "expires_in": 31535999,
    "token_type": "Bearer",
    "scope": "profile openid email permissions"
}</literal_block>
        <paragraph>where the value of BASE64-ENCODED-ID-TOKEN decodes to:</paragraph>
        <literal_block force="False" language="default" linenos="False" xml:space="preserve">{
    "family_name": "User1",
    "administrator": false,
    "sub": "foo",
    "iss": "http://localhost:18000/oauth2",
    "user_tracking_id": 1234,
    "preferred_username": "user1",
    "name": "User 1",
    "locale": "en",
    "given_name": "User 1",
    "exp": 1516757075,
    "iat": 1516753475,
    "email": "user1@edx.org",
    "aud": "bar"
}</literal_block>
        <paragraph>However, OpenID Connect is a large standard with many features and is not supported by
            the <reference name="DOT" refuri="https://github.com/evonove/django-oauth-toolkit">DOT</reference> implementation.</paragraph>
        <target ids="openid-connect" names="openid\ connect" refuri="http://openid.net/connect/"></target>
        <target ids="id-token" names="id\ token" refuri="http://openid.net/specs/openid-connect-core-1_0.html#IDToken"></target>
        <target ids="dop" names="dop" refuri="https://github.com/caffeinehit/django-oauth2-provider"></target>
        <target ids="dot" names="dot" refuri="https://github.com/evonove/django-oauth-toolkit"></target>
    </section>
    <section ids="decision" names="decision">
        <title>Decision</title>
        <paragraph>Remove our dependency on OpenID Connect since we don’t really need all its
            features and it isn’t supported by DOT. Instead, support <reference name="JSON Web Token (JWT)" refuri="https://jwt.io/">JSON Web Token (JWT)</reference>,
            which is a simpler standard and integrates well with the OAuth2 protocol.</paragraph>
        <target ids="json-web-token-jwt" names="json\ web\ token\ (jwt)" refuri="https://jwt.io/"></target>
        <paragraph>The simplest approach is to allow OAuth2 clients to request JWT tokens in place
            of randomly generated Bearer tokens. JWT tokens contain user information,
            replacing the need for OpenID’s ID Tokens altogether.</paragraph>
        <section ids="jwt-token" names="jwt\ token">
            <title>JWT Token</title>
            <paragraph>JWT tokens will be signed but not encrypted. We will not encrypt them as we
                want the requesting Application and relying parties to be able to parse the
                JWT for relevant information (like the user’s name, etc).</paragraph>
            <paragraph>The edX Authorization server (LMS) will selectively include data in the
                JWT based on requested scopes (by the Application) and authorized scopes (by
                the user). For example:</paragraph>
            <table>
                <tgroup cols="3">
                    <colspec colwidth="32"></colspec>
                    <colspec colwidth="26"></colspec>
                    <colspec colwidth="44"></colspec>
                    <thead>
                        <row>
                            <entry>
                                <paragraph>Application requests Scope</paragraph>
                            </entry>
                            <entry>
                                <paragraph>User authorizes Scope</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Authzn server (LMS) includes in JWT Payload</paragraph>
                            </entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>none</paragraph>
                            </entry>
                            <entry>
                                <paragraph>n/a</paragraph>
                            </entry>
                            <entry>
                                <bullet_list bullet="-">
                                    <list_item>
                                        <paragraph><emphasis>preferred_username</emphasis>: user’s username</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><emphasis>sub</emphasis>: user’s anonymous id</paragraph>
                                    </list_item>
                                </bullet_list>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><strong>‘email’</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph><strong>‘email’</strong></paragraph>
                            </entry>
                            <entry>
                                <bullet_list bullet="-">
                                    <list_item>
                                        <paragraph><emphasis>email</emphasis>: user’s email address</paragraph>
                                    </list_item>
                                </bullet_list>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><strong>‘profile’</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph><strong>‘profile’</strong></paragraph>
                            </entry>
                            <entry>
                                <bullet_list bullet="-">
                                    <list_item>
                                        <paragraph><emphasis>name</emphasis>: user’s name in their edX profile</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><emphasis>family_name</emphasis>: user’s last name</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><emphasis>given_name</emphasis>: user’s first name</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><emphasis>administrator</emphasis>: whether user is_staff</paragraph>
                                    </list_item>
                                </bullet_list>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><strong>‘profile’</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>user does not authorize</paragraph>
                            </entry>
                            <entry>
                                <bullet_list bullet="-">
                                    <list_item>
                                        <paragraph>profile data not provided</paragraph>
                                    </list_item>
                                </bullet_list>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section ids="jwt-authentication-library" names="jwt\ authentication\ library">
            <title>JWT Authentication Library</title>
            <paragraph>Use the open source <reference name="Django Rest Framework JWT library" refuri="https://getblimp.github.io/django-rest-framework-jwt/">Django Rest Framework JWT library</reference> as the backend
                implementation for JWT token type authentication.</paragraph>
            <target ids="django-rest-framework-jwt-library" names="django\ rest\ framework\ jwt\ library" refuri="https://getblimp.github.io/django-rest-framework-jwt/"></target>
        </section>
        <section ids="requesting-jwt-tokens" names="requesting\ jwt\ tokens">
            <title>Requesting JWT Tokens</title>
            <paragraph>An OAuth2 client requesting a JWT token_type:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">curl -X POST -d "client_id=abc&amp;client_secret=def&amp;grant_type=client_credentials&amp;token_type=jwt" http://localhost:18000/oauth2/access_token/</literal_block>
            <paragraph>would now receive:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">{
    "access_token": &lt;BASE64-ENCODED-JWT&gt;,
    "token_type": "JWT",
    "expires_in": 31535999,
    "scope": "read write profile email"
}</literal_block>
            <paragraph>where the value of BASE64-ENCODED-JWT decodes to what the BASE64-ENCODED-ID-TOKEN
                decodes to. There would no longer be a separate id_token field, but the
                access_token will now contain the data that would have been in the id_token.</paragraph>
            <paragraph><strong>Note:</strong> In order to use the JWT token type to access an API, the Authorization
                header needs to specify “JWT” instead of “Bearer”:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">curl -H "Authorization: JWT &lt;BASE64-ENCODED-JWT&gt;" http://localhost:18000/api/user/v1/me</literal_block>
        </section>
        <section ids="requesting-bearer-tokens" names="requesting\ bearer\ tokens">
            <title>Requesting Bearer Tokens</title>
            <paragraph>OAuth2 Clients that are not interested in receiving JWT tokens may continue to
                use the default Bearer token type:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">curl -X POST -d "client_id=abc&amp;client_secret=def&amp;grant_type=client_credentials" http://localhost:18000/oauth2/access_token/</literal_block>
            <paragraph>which returns:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">{
    "access_token": &lt;RANDOMLY-GENERATED-ACCESS-TOKEN&gt;,
    "token_type": "Bearer",
    "expires_in": 36000,
    "scope": "read write profile email"
}</literal_block>
            <paragraph><strong>Note:</strong> In order to use the Bearer token type to access an API, the Authorization
                header needs to specify “Bearer”:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">curl -H "Authorization: Bearer &lt;RANDOMLY-GENERATED-ACCESS-TOKEN&gt;" http://localhost:18000/api/user/v1/me</literal_block>
        </section>
    </section>
    <section ids="alternatives" names="alternatives">
        <title>Alternatives</title>
        <paragraph>Our implementation of OAuth2+JWT should not be confused with the <reference name="IETF standard for OAuth JWT Assertions" refuri="https://tools.ietf.org/html/rfc7523#section-2.1">IETF standard for
                OAuth JWT Assertions</reference>, which is for a different purpose entirely. It uses JWTs as
            a replacement for an <reference name="assertion" refuri="https://tools.ietf.org/html/rfc7521">assertion</reference> in the OAuth handshake. That is, it uses the JWT
            as a means to <emphasis>get an OAuth token</emphasis> (instead of using traditional <reference name="OAuth2 grant types" refuri="https://tools.ietf.org/html/rfc6749#section-4">OAuth2 grant
                types</reference>, which require <emphasis>client-secrets</emphasis> or <emphasis>passwords</emphasis>).</paragraph>
        <paragraph>Our implementation, however, returns a JWT <emphasis>in place of an OAuth token</emphasis>. The
            Authorization server (LMS) creates/signs a JWT that binds information about the
            requesting application and the authorizing user. This self-contained token can
            then be validated/used by any relying party (microservice/API) for granting access.</paragraph>
        <paragraph>If we did eventually support the <reference name="IETF standard for OAuth JWT Assertions" refuri="https://tools.ietf.org/html/rfc7523#section-2.1">IETF standard for OAuth JWT Assertions</reference>, a client
            Application would not send its <emphasis>client secret</emphasis> over-the-wire when requesting OAuth
            Tokens. Instead, it would use the once out-of-band exchanged <emphasis>client secret</emphasis> to sign
            its own JWT. This would be a stronger story for authenticating client Application
            requests.</paragraph>
        <target ids="ietf-standard-for-oauth-jwt-assertions" names="ietf\ standard\ for\ oauth\ jwt\ assertions" refuri="https://tools.ietf.org/html/rfc7523#section-2.1"></target>
        <target ids="assertion" names="assertion" refuri="https://tools.ietf.org/html/rfc7521"></target>
        <target ids="oauth2-grant-types" names="oauth2\ grant\ types" refuri="https://tools.ietf.org/html/rfc6749#section-4"></target>
    </section>
    <section ids="consequences" names="consequences">
        <title>Consequences</title>
        <section ids="pluses" names="pluses">
            <title>Pluses</title>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>The long-term design of the system will be simpler by using simpler
                        protocols and frameworks, such as JWT as access tokens.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>OAuth Clients obtain basic identity information within the JWT access
                        token without needing to hit an extra user info endpoint.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Any microservice can validate the JWT as an assertion without making an
                        extra round trip to the LMS.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Although there is no RFC or IETF standard for our use of OAuth+JWT, we
                        are using a relatively maintained and used <reference name="open source library" refuri="https://getblimp.github.io/django-rest-framework-jwt">open source library</reference> for our
                        implementation.</paragraph>
                </list_item>
            </bullet_list>
            <target ids="open-source-library" names="open\ source\ library" refuri="https://getblimp.github.io/django-rest-framework-jwt"></target>
        </section>
        <section ids="minuses" names="minuses">
            <title>Minuses</title>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>Token invalidation and single Logout become more difficult.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>During the transition period, there will be multiple implementations,
                        which may result in confusion and a more complex system. The shorter
                        we keep the transition period, the better.</paragraph>
                </list_item>
            </bullet_list>
        </section>
    </section>
</document>
