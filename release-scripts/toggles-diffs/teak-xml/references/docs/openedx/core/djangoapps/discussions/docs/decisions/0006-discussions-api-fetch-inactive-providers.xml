<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.21.2 -->
<document source="/Users/sarinacanelake/openedx/edx-platform/docs/references/docs/openedx/core/djangoapps/discussions/docs/decisions/0006-discussions-api-fetch-inactive-providers.rst" translation_progress="{'total': 0, 'translated': 0}" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:http="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <section ids="allow-fetching-configuration-for-inactive-providers" names="allow\ fetching\ configuration\ for\ inactive\ providers">
        <title>Allow fetching configuration for inactive providers</title>
        <section ids="status" names="status">
            <title>Status</title>
            <paragraph>Proposal</paragraph>
        </section>
        <section ids="context" names="context">
            <title>Context</title>
            <paragraph>In [ADR 003](./0003-configuration-rest-api.rst) an API was proposed for
                discussion configuration. This proposed a single API that returned
                information about the active provider and listed other available providers.</paragraph>
            <paragraph>There are a few issues with this API that we’d like to rectify such as:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>It includes a lot of information that is mostly read-only.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>It doesn’t provide any way to fetch setting for inactive provider.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>By moving the bits of the API that are read-only to a separate API the consumer
                of this API can cache the response better since it doesn’t change that often so
                the data doesn’t need to be processed and fetched as often.</paragraph>
            <paragraph>The inability to fetch information for inactive provider mainly causes issues
                when switching providers between the in-built/legacy providers and LTI
                providers.</paragraph>
            <paragraph>The current mechanism for configuring providers in the course authoring MFE is
                through two steps. In the first step, you select a provider, and in the second
                step you change its configuration.</paragraph>
            <paragraph>However when changing providers, the only information you have from the API
                is about the current provider, meaning that you cannot have configuration
                pre-filled in the configuration page in the second step. The settings page will
                only have default information, which means that on saving the configuration in
                the second step, the original saved configuration will be overridden, and
                potentially might be in an inconsistent state.</paragraph>
        </section>
        <section ids="requirements" names="requirements">
            <title>Requirements</title>
            <paragraph>Split the configuration API into two parts where one part returns static
                data about the available providers, and the other can be the configuration
                data for the discussions provider.</paragraph>
            <paragraph>The configuration API should provide a way to fetch settings for a provider
                without needing to switch to it first.</paragraph>
        </section>
        <section ids="alternatives-considered" names="alternatives\ considered">
            <title>Alternatives Considered</title>
            <paragraph>Another way around the second issue above is to save the provider change
                first, fetch the configuration data and then proceed with the second
                configuration step.</paragraph>
            <paragraph>However this can be very disruptive since changing the provider first will
                trigger a course republish and a lot of background machinery to build
                discussion topics, and will change the live experience using old settings that
                the course author might have wanted to change before publishing.</paragraph>
        </section>
        <section ids="decision" names="decision">
            <title>Decision</title>
            <paragraph>We can split the existing configuration API into two parts. The first part will
                be a read-only API for listing provider details. No data in this API can be
                modified by the user.</paragraph>
            <paragraph>The other API will return all the writable configuration for the providers.
                It will support updating the settings of the current provider as it does
                now, but will also support returning the configuration/settings of other
                providers by taking a <literal>provider_id</literal> query parameter.</paragraph>
            <section ids="provider-endpoint" names="provider\ endpoint">
                <title>Provider Endpoint</title>
                <paragraph><literal>/api/discussions/v0/course/{course_id}/providers</literal></paragraph>
                <paragraph>This will return the list of available providers and their data. This will
                    return the following pieces of information:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><literal>active</literal>: the active provider</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>features</literal>: feature support levels</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>available</literal>: provider listing</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph><strong>Sample response:</strong></paragraph>
                <literal_block force="False" highlight_args="{}" language="json" linenos="False" xml:space="preserve">{
    "active": "legacy",
    "features": [
        {
            "id": "primary-discussion-app-experience",
            "feature_support_type": "basic"
        },
        …
    ],
    "available": {
        "legacy": {
            "features": [ … ],
            "supports_lti": false,
            "external_links": { … },
            "messages": [ … ],
            "has_full_support": true
        },
        …
    }
}</literal_block>
            </section>
            <section ids="settings-endpoint" names="settings\ endpoint">
                <title>Settings Endpoint</title>
                <paragraph><literal>/api/discussions/v0/course/{course_id}/settings</literal></paragraph>
                <paragraph>This is the read-write settings API that can take an optional <title_reference>provider_id</title_reference>
                    argument in which case returns data for that provider.</paragraph>
                <paragraph>This will return the following information which is common for all providers:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>enabled</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>provider_type</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>enable_in_context</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>enable_graded_units</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>unit_level_visibility</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>The following information will vary based on provider specified:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>lti_configuration: only returned for the active provider.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>plugin_configuration: plugin configuration for the specified provider.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>Changing settings for an inactive provider is out of scope here.</paragraph>
                <paragraph><strong>Sample response:</strong></paragraph>
                <literal_block force="False" highlight_args="{}" language="json" linenos="False" xml:space="preserve">{
  "enabled": true,
  "provider_type": "legacy",
  "enable_in_context": true,
  "enable_graded_units": true,
  "unit_level_visibility": false,
  "lti_configuration": {},
  "plugin_configuration": { … }
}</literal_block>
            </section>
        </section>
        <section ids="conclusion" names="conclusion">
            <title>Conclusion</title>
            <paragraph>By splitting the data across two endpoints we make sure that only the relevant
                data can be fetched as needed.</paragraph>
            <paragraph>By making it possible to fetch settings for a discussion provider that is not
                currently active we make the process of switching providers much smoother,
                since the frontend can fetch the configuration for a provider before switching
                to it, allowing the user to get a clearer, and more consistent view of the
                settings before committing to them.</paragraph>
        </section>
    </section>
</document>
