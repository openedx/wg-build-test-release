<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.21.2 -->
<document source="/Users/sarinacanelake/openedx/edx-platform/docs/references/docs/openedx/core/djangoapps/oauth_dispatch/docs/decisions/0008-use-asymmetric-jwts.rst" translation_progress="{'total': 0, 'translated': 0}" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:http="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <section ids="use-asymmetric-jwts" names="8.\ use\ asymmetric\ jwts">
        <title>8. Use Asymmetric JWTs</title>
    </section>
    <section ids="status" names="status">
        <title>Status</title>
        <paragraph>Accepted</paragraph>
    </section>
    <section ids="context" names="context">
        <title>Context</title>
        <paragraph>The edX OAuth Provider (via this OAuth Dispatch Django app) builds and returns JSON Web Tokens (JWTs)
            when an OAuth client requests an access token with “token_type=jwt” in the request. See <reference name="Use JWT as OAuth2 Tokens; Remove OpenID Connect" refuri="https://github.com/openedx/edx-platform/blob/master/openedx/core/djangoapps/oauth_dispatch/docs/decisions/0003-use-jwt-as-oauth-tokens-remove-openid-connect.rst">Use JWT as
                OAuth2 Tokens; Remove OpenID Connect</reference>.</paragraph>
        <paragraph>We use a shared secret (“symmetric” cryptographic key) to “sign” the JWT with an HMAC (a keyed-hash
            message authentication code). This means the secret used by the OAuth Provider to create JWTs is not
            really a secret since all OAuth Clients need to know the value of the secret in order to verify the
            contents of the JWT.</paragraph>
        <paragraph>The JWT is currently not encrypted, only signed. So any client can always read the contents of the JWT.
            But to verify that the JWT was created by the OAuth Provider, the client should first verify the HMAC
            sent along with the JWT. Since the secret is “symmetric” any OAuth Client that is privy to the secret
            could also have just as easily created the JWT (thus spoofing the OAuth Provider).</paragraph>
        <target ids="use-jwt-as-oauth2-tokens-remove-openid-connect" names="use\ jwt\ as\ oauth2\ tokens;\ remove\ openid\ connect" refuri="https://github.com/openedx/edx-platform/blob/master/openedx/core/djangoapps/oauth_dispatch/docs/decisions/0003-use-jwt-as-oauth-tokens-remove-openid-connect.rst"></target>
        <paragraph>Additionally, for clients that still use Open ID Connect, their <reference name="ID Tokens are HMACed with their own client_secret" refuri="https://github.com/edx/edx-oauth2-provider/blob/7e59e30ae0bfd9eac4d05469768d79c50a90aeb7/edx_oauth2_provider/views.py#L155-L163">ID Tokens are HMACed with their own
                client_secret</reference> (privately shared with the OAuth Provider). Although this somewhat mitigates the issue
            above since each OAuth Client can no longer create tokens verifiable by other Clients, it does not
            allow a Client to forward a verifiable token to other Clients.</paragraph>
        <target ids="id-tokens-are-hmaced-with-their-own-client-secret" names="id\ tokens\ are\ hmaced\ with\ their\ own\ client_secret" refuri="https://github.com/edx/edx-oauth2-provider/blob/7e59e30ae0bfd9eac4d05469768d79c50a90aeb7/edx_oauth2_provider/views.py#L155-L163"></target>
        <paragraph>Looking forward, we want to support Single Page Apps (a.k.a., Microfronteds), where users can seamlessly
            traverse from one microfronted to another and access APIs on various backends. This <emphasis>Single Sign On</emphasis>
            capability cannot be achieved unless verifiable tokens can be forwarded from one service to another.</paragraph>
    </section>
    <section ids="decisions" names="decisions">
        <title>Decisions</title>
        <section ids="asymmetric-jwts" names="asymmetric\ jwts">
            <title>Asymmetric JWTs</title>
            <paragraph>We will introduce identified “asymmetric” cryptographic keys for signing JWTs. The OAuth Provider will
                be the only service configured with the aymmetric keypair, including its Private and Public key portions.
                All other OAuth Clients will be configured with only the Public key portion of the asymmetric key pair.
                This will ultimately replace all uses of “symmetric” keys for signing JWTs.</paragraph>
        </section>
        <section ids="kid-key-identifier" names='"kid"\ key\ identifier'>
            <title>“kid” Key Identifier</title>
            <paragraph>In order to support key rotation in a forward compatible manner, we will identify the asymmetric keys,
                using the <reference name="JSON Web Key (JWK)" refuri="https://tools.ietf.org/html/draft-ietf-jose-json-web-key-36">JSON Web Key (JWK)</reference> standard’s <reference name='"kid" (Key ID)' refuri="https://tools.ietf.org/html/draft-ietf-jose-json-web-key-36#section-4.5">“kid” (Key ID)</reference> parameter.  When a <reference name="JSON Web Signature (JWS)" refuri="https://tools.ietf.org/html/rfc7515">JSON Web Signature (JWS)</reference>
                is created to sign a JWT, its <reference name='"kid" header parameter' refuri="https://tools.ietf.org/html/rfc7515#section-4.1.4">“kid” header parameter</reference> specifies which key was used to secure the JWS.
                The code examples below show this in action.</paragraph>
            <target ids="json-web-key-jwk" names="json\ web\ key\ (jwk)" refuri="https://tools.ietf.org/html/draft-ietf-jose-json-web-key-36"></target>
            <target ids="kid-key-id" names='"kid"\ (key\ id)' refuri="https://tools.ietf.org/html/draft-ietf-jose-json-web-key-36#section-4.5"></target>
            <target ids="json-web-signature-jws" names="json\ web\ signature\ (jws)" refuri="https://tools.ietf.org/html/rfc7515"></target>
            <target ids="kid-header-parameter" names='"kid"\ header\ parameter' refuri="https://tools.ietf.org/html/rfc7515#section-4.1.4"></target>
        </section>
        <section ids="remove-jwt-issuers" names="remove\ jwt_issuers">
            <title>Remove JWT_ISSUERS</title>
            <paragraph><reference name="edx_rest_framework_extensions.settings" refuri="https://github.com/openedx/edx-drf-extensions/blob/1db9f5e3e5130a1e0f43af2035489b3ed916d245/edx_rest_framework_extensions/settings.py#L73">edx_rest_framework_extensions.settings</reference> supports having a list of <strong>JWT_ISSUERS</strong> instead of just a single
                one. This support for configuring multiple issuers is present across many services. However, this does not
                conform to the <reference name="JWT standard" refuri="https://tools.ietf.org/html/rfc7519">JWT standard</reference>, where the <reference name="issuer" refuri="https://tools.ietf.org/html/rfc7519#section-4.1.1">issuer</reference> is intended to identify the entity that generates and
                signs the JWT. In our case, that should be the single Auth service only.</paragraph>
            <paragraph>If different values for the <reference name="issuer" refuri="https://tools.ietf.org/html/rfc7519#section-4.1.1">issuer</reference> claim are needed for multi-tenancy purposes, those should be specified
                using <reference name="site configuration" refuri="https://github.com/openedx/edx-platform/blob/af841336c7e39d634c238cd8a11c5a3a661aa9e2/openedx/core/djangoapps/site_configuration/__init__.py">site configuration</reference> variants instead of adding complexity with multiple issuers.</paragraph>
            <paragraph>Additionally, <strong>JWT_ISSUERS</strong> is not intended to be used for key rotation. Rather, the set of active signing
                keys should be specified as a <reference name="JSON Web Key Set (JWK Set)" refuri="https://tools.ietf.org/html/draft-ietf-jose-json-web-key-36#section-5">JSON Web Key Set (JWK Set)</reference> instead. Thus, there would only be a single
                issuer, but with (the potential of) multiple signing keys stored in a JWT Set.</paragraph>
            <target ids="edx-rest-framework-extensions-settings" names="edx_rest_framework_extensions.settings" refuri="https://github.com/openedx/edx-drf-extensions/blob/1db9f5e3e5130a1e0f43af2035489b3ed916d245/edx_rest_framework_extensions/settings.py#L73"></target>
            <target ids="jwt-standard" names="jwt\ standard" refuri="https://tools.ietf.org/html/rfc7519"></target>
            <target ids="issuer" names="issuer" refuri="https://tools.ietf.org/html/rfc7519#section-4.1.1"></target>
            <target ids="json-web-key-set-jwk-set" names="json\ web\ key\ set\ (jwk\ set)" refuri="https://tools.ietf.org/html/draft-ietf-jose-json-web-key-36#section-5"></target>
            <target ids="site-configuration" names="site\ configuration" refuri="https://github.com/openedx/edx-platform/blob/af841336c7e39d634c238cd8a11c5a3a661aa9e2/openedx/core/djangoapps/site_configuration/__init__.py"></target>
        </section>
    </section>
    <section ids="features" names="features">
        <title>Features</title>
        <section ids="keypair-generation" names="keypair\ generation">
            <title>KeyPair Generation</title>
            <paragraph>Please have a look at <literal>openedx/core/djangoapps/oauth_dispatch/management/commands/generate_jwt_signing_key.py</literal>
                to get better understanding how to generate keypair using <literal>PyJWT</literal>.</paragraph>
            <paragraph>The public and private keypair would be similar to the following:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">## Public keyset
"""
    {
        "keys": [
            {
                "kty": "RSA",
                "key_ops": ["verify"],
                "n": "...",
                "e": "...",
                "kid": "your_key_id"
            }
        ]
    }
"""


## Private key
"""
    {
        "kty": "RSA",
        "key_ops": ["sign"],
        "n": "...",
        "e": "...",
        "d": "...",
        "p": "...",
        "q": "...",
        "dp": "...",
        "dq": "...",
        "qi": "...",
        "kid": "your_key_id"
    }
"""</literal_block>
        </section>
        <section ids="signing" names="signing">
            <title>Signing</title>
            <paragraph>To create a signature you simply need a <strong>payload</strong>, <strong>private key</strong> and your hashing algorithm:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">signed_message = jwt.encode("JWT payload in dict format", key=private_key, algorithm="RS512")</literal_block>
            <paragraph>Note: we specify <strong>RS512</strong> above to identify <emphasis>RSASSA-PKCS1-v1_5 using SHA-512</emphasis> as
                the signature algorithm value as described in the <reference name="JSON Web Algorithms (JWA)" refuri="https://tools.ietf.org/html/rfc7518#section-3.3">JSON Web Algorithms (JWA)</reference> spec.</paragraph>
            <target ids="json-web-algorithms-jwa" names="json\ web\ algorithms\ (jwa)" refuri="https://tools.ietf.org/html/rfc7518#section-3.3"></target>
        </section>
        <section ids="verify-signature" names="verify\ signature">
            <title>Verify Signature</title>
            <paragraph>To verify the signature we’ll be looping through the public keys and try to verify the signature with each of them.
                For more details you can have a look at <reference name="verify_jwk_signature_using_keyset" refuri="https://github.com/openedx/edx-drf-extensions/blob/master/edx_rest_framework_extensions/auth/jwt/decoder.py#L270">verify_jwk_signature_using_keyset</reference>. To generate <literal>keyset</literal> required for verification you
                can use <reference name="get_verification_jwk_key_set" refuri="https://github.com/openedx/edx-drf-extensions/blob/master/edx_rest_framework_extensions/auth/jwt/decoder.py#L395">get_verification_jwk_key_set</reference> method.</paragraph>
            <target ids="verify-jwk-signature-using-keyset" names="verify_jwk_signature_using_keyset" refuri="https://github.com/openedx/edx-drf-extensions/blob/master/edx_rest_framework_extensions/auth/jwt/decoder.py#L270"></target>
            <target ids="get-verification-jwk-key-set" names="get_verification_jwk_key_set" refuri="https://github.com/openedx/edx-drf-extensions/blob/master/edx_rest_framework_extensions/auth/jwt/decoder.py#L395"></target>
        </section>
        <section ids="key-rotation" names="key\ rotation">
            <title>Key Rotation</title>
            <paragraph>In future if we plan to rotate the keys, we can simply add new key public key to the public keyset and remove the old private one.
                Means, at any time there might be more than one public key but there will be only one private key. Considering that we are doing verification
                by looping through all the available public keys, the <literal>kid</literal> parameter is not
                as important as it was before. But it’s still recommended to use it. It will help us to differentiate between the old and new public keys.</paragraph>
        </section>
    </section>
    <section ids="consequences" names="consequences">
        <title>Consequences</title>
        <bullet_list bullet="*">
            <list_item>
                <paragraph>As described in the <reference name="Context" refid="context">Context</reference>, there are both security and feature (Single Sign On)
                    benefits of using asymmetric JWTs.</paragraph>
            </list_item>
            <list_item>
                <paragraph>As we transition away from DOP and Open ID Connect (see past decisions), we continue
                    to have multiple authentication implementations in the platform. Introducing
                    asymmetric JWTs introduces yet another. The sooner we upgrade our dependent services
                    and remove these other mechanisms, the better - in the meantime, we are increasing
                    code complexity.</paragraph>
            </list_item>
            <list_item>
                <paragraph>All uses of “symmetric” keys used for signing JWTs should be marked as deprecated
                    until they can be removed. Pointing to this decision record from other code will
                    quickly explain and help identify outstanding work for removal.</paragraph>
            </list_item>
        </bullet_list>
    </section>
</document>
