<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.21.2 -->
<document source="/Users/sarinacanelake/openedx/edx-platform/docs/references/docs/openedx/core/djangoapps/content/learning_sequences/docs/decisions/0001-extensions-to-inter-app-apis.rst" translation_progress="{'total': 0, 'translated': 0}" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:http="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <section ids="extensions-to-inter-app-api-conventions" names="extensions\ to\ inter-app\ api\ conventions">
        <title>Extensions to Inter-app API Conventions</title>
        <section ids="status" names="status">
            <title>Status</title>
            <paragraph>Draft</paragraph>
        </section>
        <section ids="context" names="context">
            <title>Context</title>
            <paragraph>In order to improve the maintainability and stability of our applications, we
                introduced <literal>edx-platform/docs/decisions/0002-inter-app-apis.rst</literal>, which
                outlines the use of package level <literal>api.py</literal> files to provide single-points of
                entry to the app’s functionality.</paragraph>
            <paragraph>This ADR seeks to add further conventions to help address issues that have come
                up in our usage over the years. Namely:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>It is difficult to determine exactly what is being returned by inter-app APIs.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>It is difficult to know exactly what valid inputs to inter-app APIs are.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>It is difficult to tell when we break compatibility in an inter-app API.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Critical functionality (exercised via views) is sometimes missing from the
                        inter-app API, or behaves differently from its REST counterpart.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>If we find that this ADR’s additional conventions are helpful, we can add them
                to the existing set of Inter-app APIs defined at the top level of edx-platform.</paragraph>
        </section>
        <section ids="decision" names="decision">
            <title>Decision</title>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>All API data structures will be declared as immutable attrs classes in a
                        separate <literal>data.py</literal> file. All data class attributes will have type
                        annotations.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Data structures in <literal>data.py</literal> will include basic validation of their inputs,
                        though this will <emphasis>not</emphasis> include validation that requires database access.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>All public inter-app API functions will use type annotations for arguments
                        and return values.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>All public inter-app API functions will be exported in the top level <literal>api</literal>
                        package. Other applications will only ever import from this top level
                        package.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Views, tasks, and any other parts of the learning_sequences app that are not
                        in the api package will obey the same rules that external apps would follow.
                        This means that views for learning_sequences will only import from api and
                        will not directly import from models.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Serializers for REST APIs will be defined as inner classes on the views.
                        Serializer re-use across use cases will be explicitly discouraged to prevent
                        modifications from rippling across and breaking compatibility elsewhere.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Wherever possible, API-level tests will be written without mocking internals,
                        or prepping the database with model manipulations. The goal of this is to
                        make it so that that API-level tests <emphasis>only</emphasis> break when there are in fact API
                        changes. We can mock calls to other services, like grades.</paragraph>
                </list_item>
            </enumerated_list>
        </section>
        <section ids="consequences" names="consequences">
            <title>Consequences</title>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>It will be easier for other applications to access learning_sequence
                        functionality in a more easily understood and maintainable way.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>It will be easier to build and maintain plugin code that depends on this
                        application.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Changes that break backwards compatibility will be more obvious.</paragraph>
                </list_item>
            </enumerated_list>
        </section>
        <section ids="references" names="references">
            <title>References</title>
            <paragraph>A lot of these extensions were either copied from or inspired by
                <reference name="Django structure for scale and longevity" refuri="https://www.youtube.com/watch?v=yG3ZdxBb1oo">Django structure for scale and longevity</reference><target ids="django-structure-for-scale-and-longevity" names="django\ structure\ for\ scale\ and\ longevity" refuri="https://www.youtube.com/watch?v=yG3ZdxBb1oo"></target>
                presented by Radoslav Georgiev at EuroPython 2018, though there are a number of
                differences like our use of <literal>attrs</literal>, and trying to keep better backwards
                compatibility with our existing <literal>api.py</literal> conventions.</paragraph>
        </section>
    </section>
</document>
