<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.21.2 -->
<document source="/Users/sarinacanelake/openedx/edx-platform/docs/decisions/0022-settings-simplification.rst" translation_progress="{'total': 0, 'translated': 0}" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:http="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <section ids="django-settings-simplification" names="django\ settings\ simplification">
        <title>Django settings simplification</title>
        <section ids="status" names="status">
            <title>Status</title>
            <paragraph>Accepted</paragraph>
            <paragraph>Implementation tracked by: <reference refuri="https://github.com/openedx/edx-platform/issues/36215">https://github.com/openedx/edx-platform/issues/36215</reference></paragraph>
        </section>
        <section ids="context" names="context">
            <title>Context</title>
            <paragraph>OEP-45 declares that sites will configure each IDA’s (indepently-deployable
                application’s) Django settings with an <literal>&lt;APPNAME&gt;_CFG</literal> YAML file, parsed and
                loaded by a single upstream-provided <literal>DJANGO_SETTINGS_MODULE</literal>. This contrasts
                with the Django convention, which is that sites override Django settings using
                their own <literal>DJANGO_SETTINGS_MODULE</literal>. The rationale was that all Open edX
                setting customization can be reasonably specified in YAML; therefore, it is
                operationally safer to avoid using a custom <literal>DJANGO_SETTINGS_MODULE</literal>, and it
                is operationally desirable for all operation modes to execute the same Python
                module for configuration. This was <reference name="briefly discussed in the oep-45 review" refuri="https://github.com/openedx/open-edx-proposals/pull/143#discussion_r411180111">briefly discussed in the oep-45 review</reference><target ids="briefly-discussed-in-the-oep-45-review" names="briefly\ discussed\ in\ the\ oep-45\ review" refuri="https://github.com/openedx/open-edx-proposals/pull/143#discussion_r411180111"></target>.</paragraph>
            <paragraph>For example, in theory, the upstream production LMS config might be named
                <literal>lms/settings/settings.py</literal> and work like this:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>import <literal>lms/settings/required.py</literal>, which declares settings that must be
                        overridden.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>import <literal>lms/settings/defaults.py</literal>, which defines reasonable defaults for
                        all other settings.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>load <literal>/openedx/config/lms.yml</literal>, which should override every setting
                        declared in required.py and override some settings defined in defaults.py.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>apply some minimal merging and/or conditional logic to handle yaml values
                        which are not simple overrides (e.g., <literal>FEATURES</literal>, which needs to be
                        merged).</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>The upstream production CMS config would exist in parallel.</paragraph>
            <paragraph>However, as of Sumac, we do not know of any site other than edx.org that
                successfully uses only YAML files for configuration. Furthermore, the
                upstream-provided <literal>DJANGO_SETTINGS_MODULE</literal> which loads these yaml files
                (<literal>lms/envs/production.py</literal>) is not simple: it declares defaults, imports from
                other Django settings modules, sets more defaults, handles dozens of special
                cases, and has a special Open-edX-specific “derived settings” mechanism to
                handle settings that depend on other settings.</paragraph>
            <paragraph>Tutor does provide YAML files, but <emphasis>it also has custom production and
                    development settings files</emphasis>! The result is that we have multiple layers of
                indirection between edx-platform’s common base settings, and the Django
                settings rendered into the actual community-supported Open edX distribution
                (Tutor). Specifically, production edx-platform configuration currently works
                like this:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph><literal>lms/envs/tutor/production.py</literal>…</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>is generated by Tutor from the template
                                <literal>tutor/templates/apps/openedx/settings/lms/production.py</literal>,</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>which derives
                                        <literal>tutor/templates/apps/openedx/settings/partials/common_lms.py</literal>,</paragraph>
                                    <bullet_list bullet="*">
                                        <list_item>
                                            <paragraph>which derives
                                                <literal>tutor/templates/apps/openedx/settings/partials/common_all.py</literal>;</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </list_item>
                                <list_item>
                                    <paragraph>and uses templates vars from Tutor configuration (<literal>config.yml</literal>),</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>and invokes hooks from any enabled Tutor plugins;</paragraph>
                                </list_item>
                            </bullet_list>
                        </list_item>
                        <list_item>
                            <paragraph>it imports <literal>lms/envs/production.py</literal>,</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>which imports <literal>lms/envs/common.py</literal>,</paragraph>
                                    <bullet_list bullet="*">
                                        <list_item>
                                            <paragraph>which sets production-inappropriate defaults;</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </list_item>
                                <list_item>
                                    <paragraph>it sets more defaults, some of them edX.org-specific;</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>it loads <literal>/openedx/config/lms.yml</literal>…</paragraph>
                                    <bullet_list bullet="*">
                                        <list_item>
                                            <paragraph>which is generated by Tutor from template
                                                <literal>tutor/templates/apps/openedx/config/lms.env.yml</literal></paragraph>
                                            <bullet_list bullet="*">
                                                <list_item>
                                                    <paragraph>which derives
                                                        <literal>tutor/templates/apps/openedx/config/partials/auth.yml</literal>;</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </list_item>
                                    </bullet_list>
                                </list_item>
                                <list_item>
                                    <paragraph>it reverts some of <literal>lms.yml</literal> with new “defaults”;</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>and it uses certain values from <literal>/openedx/config/lms.yml</literal> to
                                        conditionally override more settings and update certain dictionary
                                        settings, in a way which is not documented.</paragraph>
                                </list_item>
                            </bullet_list>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph><literal>cms/envs/tutor/production.py</literal>…</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>is generated by Tutor from the template
                                <literal>tutor/templates/apps/openedx/settings/cms/production.py</literal>,</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>which derives
                                        <literal>tutor/templates/apps/openedx/settings/partials/common_cms.py</literal>,</paragraph>
                                    <bullet_list bullet="*">
                                        <list_item>
                                            <paragraph>which derives
                                                <literal>tutor/templates/apps/openedx/settings/partials/common_all.py</literal>;</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </list_item>
                                <list_item>
                                    <paragraph>and uses templates vars from Tutor configuration (<literal>config.yml</literal>),</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>and invokes hooks from any enabled Tutor plugins;</paragraph>
                                </list_item>
                            </bullet_list>
                        </list_item>
                        <list_item>
                            <paragraph>it imports <literal>cms/envs/production.py</literal>,</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>it imports <literal>cms/envs/common.py</literal>, which sets production-inappropriate
                                        defaults,</paragraph>
                                    <bullet_list bullet="*">
                                        <list_item>
                                            <paragraph>and which imports <literal>lms/envs/common.py</literal>, which also sets
                                                production-inappropriate defaults;</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </list_item>
                                <list_item>
                                    <paragraph>it sets more defaults, some of the edX.org-specific;</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>it loads <literal>/openedx/config/cms.yml</literal>…</paragraph>
                                    <bullet_list bullet="*">
                                        <list_item>
                                            <paragraph>which is generated by Tutor from template
                                                <literal>tutor/templates/apps/openedx/config/cms.env.yml</literal></paragraph>
                                            <bullet_list bullet="*">
                                                <list_item>
                                                    <paragraph>which derives
                                                        <literal>tutor/templates/apps/openedx/config/partials/auth.yml</literal>;</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </list_item>
                                    </bullet_list>
                                </list_item>
                                <list_item>
                                    <paragraph>it reverts some of <literal>/openedx/config/cms.yml</literal> with new “defaults”;</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>and it uses certain values from <literal>/openedx/config/cms.yml</literal> to
                                        conditionally override more settings and update certain dictionary
                                        settings, in a way which is not documented.</paragraph>
                                </list_item>
                            </bullet_list>
                        </list_item>
                    </bullet_list>
                </list_item>
            </bullet_list>
            <paragraph>This is very difficult to reason about. Configuration complexity is frequently
                cited as a chief area of pain for Open edX developers and operators.
                Discussions in the Named Release Planning and Build-Test-Release Working Groups
                frequently are encumbered with confusion and uncertainty of what the default
                settings are in edx-platform, how they differ from Tutor’s default settings,
                what settings can be overriden, and how to do so. Only a minority of developers
                and operators fully understand the configuration logic described above
                end-to-end; even for those that do, following this override chain for any given
                Django setting is time-consuming and error-prone. CAT-1 bugs and high-severity
                security vulnerabilities have arisen due to misunderstanding of how
                edx-platform Django settings are rendered.</paragraph>
            <paragraph>Developers are frequently instructed that if they need to override a Django
                setting, the preferred way to do so is to “make a Tutor plugin”. This is a
                large amount of prior knowledge, boilerplate, and indirection, all required
                to simply do something which Django provides out-of-the-box via a custom
                <literal>DJANGO_SETTINGS_MODULE</literal>.</paragraph>
            <paragraph>Finally, it is worth nothing that all the complexity and toil exists alongside
                other edx-platform configuration methods, such as Waffle, configuration models,
                site configuration, XBlock configuration, and entry points. Those configuration
                pathways are outside of the scope of this ADR, but are mentioned to demonstrate
                the distressing level of complexity that developers and operators face when
                working with the platform.</paragraph>
        </section>
        <section ids="decision-consequences" names="decision\ &amp;\ consequences">
            <title>Decision &amp; Consequences</title>
            <section ids="overview" names="overview">
                <title>Overview</title>
                <paragraph>We orient edx-platform towards using standard Django settings configuration
                    patterns. Specifically, we will make it easy for operators to override settings
                    by supplying a custom <literal>DJANGO_SETTINGS_MODULE</literal>.</paragraph>
                <paragraph>Moving towards this goals will need to be an iterative and careful process,
                    and it’s likely that some aspects of the target structure or plan (described
                    below) will need to updated along the way. Nonetheless, once it becomes clear
                    that we are landing on a solid settings structure for edx-platform, we’ll
                    propose an OEP-45 update to generalize the structure to all deployable Open edX
                    Django applications.</paragraph>
                <paragraph>Finally, based on what we learn throughout this process, our OEP-45 propsal
                    will either recommend to:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>Drop support for the <literal>&lt;APPNAME&gt;_CFG</literal> YAML files, or</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Simplify the <literal>&lt;APPNAME&gt;_CFG</literal> YAML schema, document it, and clarify that it
                            is an optional alternative to <literal>DJANGO_SETTINGS_MODULE</literal> rather than the
                            required/preferred configuration method.</paragraph>
                    </list_item>
                </enumerated_list>
                <paragraph>At the time, we do not have enough information whether option 1 or 2 would be
                    more beneficial overall to the community.
                    <reference name="The discussion on this sub-decisision will continue on this GitHub issue" refuri="https://github.com/openedx/open-edx-proposals/issues/684">The discussion on this sub-decisision will continue on this GitHub issue</reference><target ids="the-discussion-on-this-sub-decisision-will-continue-on-this-github-issue" names="the\ discussion\ on\ this\ sub-decisision\ will\ continue\ on\ this\ github\ issue" refuri="https://github.com/openedx/open-edx-proposals/issues/684"></target>.</paragraph>
            </section>
            <section ids="target-settings-structure-for-edx-platform" names="target\ settings\ structure\ for\ edx-platform">
                <title>Target settings structure for edx-platform</title>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph><literal>openedx/envs/common.py</literal>: Define as much shared configuration between LMS
                            and CMS as possible, including: (a) where possible, annotated definitions of
                            edx-platform-specific settings with <emphasis>reasonable, production-ready</emphasis> defaults;
                            (b) otherwise, annotated definitions of edx-platform-specific settings (like
                            secrets) with <emphasis>obviously-wrong</emphasis> defaults, ensuring they aren’t used in
                            production; and (c) reasonable production-ready overrides of third-party
                            settings, ideally with explanatory comments (but not annotations). When a
                            particular setting’s default should depend on the <emphasis>final</emphasis> value of another
                            setting, the former should be assigned to a
                            <literal>Derived(...)</literal> value, where <literal>...</literal> is a computation based on the latter.</paragraph>
                        <bullet_list bullet="*">
                            <list_item>
                                <paragraph><literal>lms/envs/common.py</literal>: Extend <literal>openedx/envs/common.py</literal> to create, as
                                    much as possible, a production-ready settings file for the LMS. These
                                    extension may include: (a) annotated definitions of LMS-specific settings
                                    with production-ready defaults; (b) annotated definitions of LMS-specific
                                    settings with obviously-wrong defaults; and (c) LMS-specific
                                    overrides of settings defined in <literal>openedx/envs/common.py</literal> and of
                                    third-party settings, ideally with explanatory comments (but not
                                    annotations). Again, <literal>Derived</literal> settings can be used as appropriate. This
                                    will be the default settings file for running LMS management commands,
                                    although tools can override this (as usual) by specifying a
                                    <literal>DJANGO_SETTINGS_MODULE</literal>.</paragraph>
                                <bullet_list bullet="*">
                                    <list_item>
                                        <paragraph><literal>lms/envs/test.py</literal>: Override LMS settings for unit tests. Should work
                                            in a local venv as well as in CI. Needs to invoke <literal>derive_settings</literal> in
                                            order to render all previously-defined <literal>Derived</literal> settings.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal>lms/envs/yaml.py</literal> (only if we decide to retain YAML support):
                                            Loads overrides from a YAML File at <literal>LMS_CFG</literal>, plus some well-defined
                                            special handling for mergable values like <literal>FEATURES</literal>. This is adapted
                                            from and replaces lms/envs/production.py. It will invoke
                                            <literal>derive_settings</literal>.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal>&lt;downstream&gt;/lms_prod.py</literal> (example path): Open edX sites that do not
                                            use <literal>lms/envs/yaml.py</literal> will instead have to have their
                                            <literal>DJANGO_SETTINGS_MODULE</literal> environment variable pointed at a custom
                                            settings module, derived from <literal>lms/envs/common.py</literal>.  It is important
                                            that this module both (i) replaces the obviously-wrong settings with
                                            appropriate production settings, and (ii) invokes <literal>derive_settings</literal> to
                                            render all previously-defined <literal>Derived</literal> settings. If we decide not to
                                            retain YAML support, then <emphasis>every</emphasis> Open edX deployment will need to be
                                            pointed at such a custom settings module settings file, either maintained
                                            by the operator or by a downstream tool (like Tutor).</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal>lms/envs/dev.py</literal>: Override LMS settings so that it can run
                                            “bare metal” directly on a developer’s local machine using debug-friendly
                                            settings. Will use <literal>local.openedx.io</literal> (which resolves to 127.0.0.1) as
                                            a base domain, which should be suitable for downstream tools as well. It
                                            will invoke <literal>derive_settings</literal>.</paragraph>
                                        <bullet_list bullet="*">
                                            <list_item>
                                                <paragraph><literal>&lt;downstream&gt;/lms_dev.py</literal> (example path): In order to
                                                    run the LMS, downstream tools (like Tutor, and 2U’s devstack) will
                                                    need to separately maintain their own custom settings module derived
                                                    from <literal>lms/envs/dev.py</literal>, and point their
                                                    <literal>DJANGO_SETTINGS_MODULE</literal> environment variable at this module.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </list_item>
                                </bullet_list>
                            </list_item>
                            <list_item>
                                <paragraph><literal>cms/envs/common.py</literal></paragraph>
                                <bullet_list bullet="*">
                                    <list_item>
                                        <paragraph><literal>cms/envs/test.py</literal></paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal>cms/envs/yaml.py</literal> (only if we decide to retain YAML support)</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal>&lt;downstream&gt;/cms_prod.py</literal> (example path)</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal>cms/envs/dev.py</literal></paragraph>
                                        <bullet_list bullet="*">
                                            <list_item>
                                                <paragraph><literal>&lt;downstream&gt;/cms_dev.py</literal> (example path)</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </list_item>
                                </bullet_list>
                            </list_item>
                        </bullet_list>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="plan-of-action" names="plan\ of\ action">
                <title>Plan of action</title>
                <paragraph>These steps are non-breaking unless noted.</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Introduce a dump_settings management command so that we can more easily
                            validate changes (or lack thereof) to the terminal edx-platform settings
                            modules.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Improve edx-platform’s API for
                            deriving settings, as we are about to depend on it significantly more than we
                            currently do. This is a potentially BREAKING CHANGE to any downstream
                            settings files which imported from <literal>openedx.core.lib.derived</literal>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Remove redundant overrides in (cms,lms)/envs/production.py. Use Derived
                            settings defaults to further simplify the module without changing its output.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Create openedx/envs/common.py, ensuring that any annotations defined in it
                            are included in the edx-platform reference docs build. Move settings which
                            are shared between (cms,lms)/envs/common.py into openedx/envs/common.py. This
                            may be iteratively done across multiple PRs.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Find the best production-ready defaults between both
                            (lms,cms)/envs/production.py and Tutor’s production.pys, and “bubble” them up
                            to (openedx,cms,lms)/common.py. Keep (lms,cms)/envs/production.py unchanged
                            through this process. This is a BREAKING CHANGE for any operator that derives
                            from (lms,cms)/envs/common.py directly. Most operators derive from
                            (lms,cms)/envs/production.py, so we do not expect this to affect many sites,
                            if any.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Develop (cms,lms)/envs/dev based off of (cms,lms)/envs/common.py.
                            Iterate until we can run “bare metal” development server for LMS and CMS
                            using these settings.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Deprecate and remove (cms,lms)/envs/devstack.py. This is a BREAKING CHANGE to
                            downstream development tools (like Tutor and 2U’s devstack), as they will
                            now either need to maintain local copies of these modules, or “rebase”
                            themselves onto (lms,cms)/envs/dev.py.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Propose and, if accepted, implement an update to OEP-45 (Configuring and
                            Operating Open edX). <reference name="Progress on this update is tracked here" refuri="https://github.com/openedx/open-edx-proposals/issues/587">Progress on this update is tracked here</reference>. As mentioned
                            in the Decision section, based on (a) what we learn from previous steps and
                            (b) discussion in <reference name='"Should we continue to support YAML settings?"' refuri="https://github.com/openedx/open-edx-proposals/issues/684">“Should we continue to support YAML settings?”</reference><target ids="should-we-continue-to-support-yaml-settings" names='"should\ we\ continue\ to\ support\ yaml\ settings?"' refuri="https://github.com/openedx/open-edx-proposals/issues/684"></target>
                            this update will either:</paragraph>
                        <enumerated_list enumtype="arabic" prefix="" suffix=".">
                            <list_item>
                                <paragraph>Revoke the OEP-45 sections regarding YAML. Deprecate and remove
                                    (cms,lms)/envs/production.py. This is a BREAKING CHANGE for tools and
                                    providers that use these settings modules, as they will either need to
                                    maintain local copies of these modules, or “rebase” their internal
                                    settings modules onto (cms,lms)/envs/common.py. Update operator
                                    documenation as needed.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Update OEP-45 to clarify that YAML configuration is
                                    optional. Operators can opt out of YAML by deriving directly from
                                    (cms,lms)/envs/common.py, or they can opt into YAML by using
                                    (cms,lms)/envs/yaml.py. Document a simplified YAML schema in OEP-45.
                                    There will be several well-communicated BREAKING CHANGES in YAML behavior
                                    in order to achieve the simplified schema. Furthermore, the rename of
                                    (cms,lms)/envs/production.py to (cms,lms)/envs/yaml.py will be a BREAKING
                                    CHANGE.</paragraph>
                            </list_item>
                        </enumerated_list>
                    </list_item>
                    <list_item>
                        <paragraph>Create tickets to achieve a similar OEP-45-compliant settings structure in
                            any IDAs (independently-deployable applications) which exist in the openedx
                            GitHub organization, such as the Credentials service.</paragraph>
                    </list_item>
                </bullet_list>
                <target ids="progress-on-this-update-is-tracked-here" names="progress\ on\ this\ update\ is\ tracked\ here" refuri="https://github.com/openedx/open-edx-proposals/issues/587"></target>
            </section>
        </section>
        <section ids="alternatives-considered" names="alternatives\ considered">
            <title>Alternatives Considered</title>
            <section ids="one-alternative-settings-structure" names="one\ alternative\ settings\ structure">
                <title>One alternative settings structure</title>
                <paragraph>Here is an alternate structure that would de-dupe any shared LMS/CMS dev &amp; test
                    logic by creating more shared modules within openedx/envs folder. Although
                    DRYer, this structure would increase the total number of edx-platform files and
                    potentially encourage more LMS-CMS coupling. So, we will not pursue this
                    structure, but will keep it in mind as an alternative if we enounter
                    difficulties with the plan laid out in this ADR.</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph><literal>openedx/envs/common.py</literal></paragraph>
                        <bullet_list bullet="*">
                            <list_item>
                                <paragraph><literal>lms/envs/prod.py</literal></paragraph>
                                <bullet_list bullet="*">
                                    <list_item>
                                        <paragraph><literal>&lt;downstream&gt;/lms_prod.py</literal></paragraph>
                                    </list_item>
                                </bullet_list>
                            </list_item>
                            <list_item>
                                <paragraph><literal>cms/envs/prod.py</literal></paragraph>
                                <bullet_list bullet="*">
                                    <list_item>
                                        <paragraph><literal>&lt;downstream&gt;/cms_prod.py</literal></paragraph>
                                    </list_item>
                                </bullet_list>
                            </list_item>
                            <list_item>
                                <paragraph><literal>openedx/envs/test.py</literal></paragraph>
                                <bullet_list bullet="*">
                                    <list_item>
                                        <paragraph><literal>lms/envs/test.py</literal></paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal>cms/envs/test.py</literal></paragraph>
                                    </list_item>
                                </bullet_list>
                            </list_item>
                            <list_item>
                                <paragraph><literal>openedx/envs/dev.py</literal></paragraph>
                                <bullet_list bullet="*">
                                    <list_item>
                                        <paragraph><literal>lms/envs/dev.py</literal></paragraph>
                                        <bullet_list bullet="*">
                                            <list_item>
                                                <paragraph><literal>&lt;downstream&gt;/lms_dev.py</literal></paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal>cms/envs/dev.py</literal></paragraph>
                                        <bullet_list bullet="*">
                                            <list_item>
                                                <paragraph><literal>&lt;downstream&gt;/cms_dev.py</literal></paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </list_item>
                                </bullet_list>
                            </list_item>
                        </bullet_list>
                    </list_item>
                </bullet_list>
            </section>
        </section>
    </section>
</document>
