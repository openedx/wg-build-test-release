<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.21.2 -->
<document source="/Users/sarinacanelake/openedx/edx-platform/docs/decisions/0021-fixing-quality-and-js-checks.rst" translation_progress="{'total': 0, 'translated': 0}" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:http="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <section ids="fixing-the-quality-and-js-checks" names="fixing\ the\ quality\ and\ js\ checks">
        <title>Fixing the Quality and JS checks</title>
        <section ids="status" names="status">
            <title>Status</title>
            <paragraph>Accepted</paragraph>
            <paragraph>Implemented by <reference refuri="https://github.com/openedx/edx-platform/pull/35159">https://github.com/openedx/edx-platform/pull/35159</reference></paragraph>
        </section>
        <section ids="context" names="context">
            <title>Context</title>
            <paragraph>edx-platform PRs need to pass a series of CI checks before merging, including
                but not limited to: a CLA check, various unit tests, and various code quality
                tests. Of these checks, two checks were implemented using the “Paver” Python
                package, a scripting library <reference name="which we have been trying to move off of" refuri="https://github.com/openedx/edx-platform/issues/34467">which we have been trying to move off of</reference>. These
                two checks and their steps were:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph><strong>Check: Quality others</strong></paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph><strong>pii_check</strong>: Ensure that Django models have PII annotations as
                                described in <reference name="OEP-30" refuri="https://docs.openedx.org/projects/openedx-proposals/en/latest/architectural-decisions/oep-0030-arch-pii-markup-and-auditing.html">OEP-30</reference>, with a minimum threshold of <strong>94.5%</strong> of models
                                annotated.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><strong>stylelint</strong>: Statically check sass stylesheets for common errors.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><strong>pep8</strong>: Run pycodestyle against Python code.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><strong>eslint</strong>: Statically check javascript code for common errors.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><strong>xsslint</strong>: Check python &amp; javascript for xss vulnerabilities.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><strong>check_keywords</strong>: Compare Django model field names against a denylist of
                                reserved keywords.</paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph><strong>Check: JS</strong></paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph><strong>test-js</strong>: Run javascript unit tests.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><strong>coverage-js</strong>: Check that javascript test coverage has not dropped.</paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
            </bullet_list>
            <paragraph>As we worked to reimplement these checks without Paver, we unfortunately
                noticed that four of those steps had bugs in their implementations, and thus
                had not been enforcing what they promised to:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph><strong>pii_check</strong>: Instead of just checking the result of the underlying
                        code_annotations command, this check wrote an annotations report to a file,
                        and then used regex to parse the report and determine whether the check
                        should pass. However, the check failed to validate that the generation of the
                        report itself was successful. So, when malformed annotations were introduced
                        to the edx-proctoring repository, which edx-platform installs, the check
                        began silently passing.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>stylelint</strong>: At some point, the <title_reference>stylelint</title_reference> binary stopped being available
                        on the runner’s <title_reference>$PATH</title_reference>. Rather than causing the Quality Others check to
                        fail, the Paver code quietly ignored the shell error, and considered the
                        empty stylelint report file to indicate that there were not linting
                        violations.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>test-js</strong>: There are eight suites within test-js. Six of them work fine.
                        But three of them–specifically the suites that test code built by Webpack–
                        have not been running for some unknown amount of time. The Webpack test build
                        has been failing without signalling that the test suite should fail,
                        both preventing the tests from runnning and preventing anyone from noticing
                        that the tests weren’t running.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>coverage-js</strong>: This check tried to use <title_reference>diff-cover</title_reference> in order to compare the
                        coverage report on the current branch with the coverage report on the master
                        branch. However, the coverage report does not exist on the master branch, and
                        it’s not clear when it ever did. The coverage-js step failed to validate that
                        <title_reference>diff-cover</title_reference> ran successfully, and instead of raising an error, it allowed
                        the JS check to pass.</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="decision-consequences" names="decision\ &amp;\ consequences">
            <title>Decision &amp; Consequences</title>
            <section ids="pii-check" names="pii_check">
                <title>pii_check</title>
                <paragraph>We <problematic ids="id2" refid="id1">`fixed the malformed annotations`_</problematic> in edx-proctoring, allowing the pii_check
                    to once again check model coverage. We have ensured that any future failure of
                    the code_annotations command (due to, for example, future malformed
                    annotations) will cause the pii_check step and the overall Quality Others check
                    to fail. We have stopped trying to parse the result of the annotations report
                    in CI, as this was and is completely unneccessary.</paragraph>
                <paragraph>In order to keep “Quality others” passing on the edx-platform master branch, we
                    lowered the PII annotation coverage threshold to reflect the percentage of
                    then-annotated models: <strong>71.6%</strong>. After a timeboxed effort to add missing
                    annotations and expand the annotation allowlist as appropriate, we have managed
                    to raise the threshold to <strong>85.3%</strong>. It is not clear whether we will put in
                    further effort to raise the annotation threshold back to 95%.</paragraph>
                <paragraph>This was all already <reference name="announced on the forums" refuri="https://discuss.openedx.org/t/checking-pii-annotations-with-a-lower-coverage-threshold/14254">announced on the forums</reference>.</paragraph>
            </section>
            <section ids="stylelint" names="stylelint">
                <title>stylelint</title>
                <paragraph>We have removed the <strong>stylelint</strong> step entirely from the “Quality Others”
                    check. Sass code in the edx-platform repository will no longer be subject to
                    any static analysis.</paragraph>
            </section>
            <section ids="test-js" names="test-js">
                <title>test-js</title>
                <paragraph>We have stopped running these Webpack-based suites in CI:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph><literal>npm run test-lms-webpack</literal></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>npm run test-cms-webpack</literal></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>npm run test-xmodule-webpack</literal></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>We have created a new edx-platform backlog issue for
                    <reference name="fixing and re-enabling these suites" refuri="https://github.com/openedx/edx-platform/issues/35956">fixing and re-enabling these suites</reference>.
                    It is not clear whether we will prioritize that issue, or instead prioritize
                    deprecation and removal of the code that those suites were supposed to be
                    testing.</paragraph>
            </section>
            <section ids="coverage-js" names="coverage-js">
                <title>coverage-js</title>
                <paragraph>We will remove the <strong>coverage-js</strong> step entirely from the “JS” check.
                    JavaScript code in the edx-platform repository will no longer be subject to any
                    unit test coverage checking.</paragraph>
            </section>
        </section>
        <section ids="rejected-alternatives" names="rejected\ alternatives">
            <title>Rejected Alternatives</title>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>While it would be ideal to raise the pii_check threshold to 94.5% or even
                        100%, we do not have the resources to promise this.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>It would also be nice to institute a “racheting” mechanism for the PII
                        annotation coverage threshold. That is, every commit to master could save the
                        coverage percentage to a persisted artifact, allowing subsequent PRs to
                        ensure that the pii_check never returns lower than the current threshold. We
                        will put this in the Aximprovements backlog, but we cannot commit to
                        implementing it right now.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>We will not fix or apply amnestly in order to re-enable stlylint or
                        coverage-js. That could take significant effort, which we believe would be
                        better spent completing the migration off of this legacy Sass and JS and onto
                        our modern React frontends.</paragraph>
                </list_item>
            </bullet_list>
            <target ids="fixing-and-re-enabling-these-suites" names="fixing\ and\ re-enabling\ these\ suites" refuri="https://github.com/openedx/edx-platform/issues/35956"></target>
            <target ids="which-we-have-been-trying-to-move-off-of" names="which\ we\ have\ been\ trying\ to\ move\ off\ of" refuri="https://github.com/openedx/edx-platform/issues/34467"></target>
            <target ids="announced-on-the-forums" names="announced\ on\ the\ forums" refuri="https://discuss.openedx.org/t/checking-pii-annotations-with-a-lower-coverage-threshold/14254"></target>
            <target ids="oep-30" names="oep-30" refuri="https://docs.openedx.org/projects/openedx-proposals/en/latest/architectural-decisions/oep-0030-arch-pii-markup-and-auditing.html"></target>
            <target ids="fix-the-malformed-annotations" names="fix\ the\ malformed\ annotations" refuri="https://github.com/openedx/edx-proctoring/issues/1241"></target>
        </section>
    </section>
</document>
