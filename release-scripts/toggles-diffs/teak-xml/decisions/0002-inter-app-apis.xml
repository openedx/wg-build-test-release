<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.21.2 -->
<document source="/Users/sarinacanelake/openedx/edx-platform/docs/decisions/0002-inter-app-apis.rst" translation_progress="{'total': 0, 'translated': 0}" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:http="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <section ids="inter-app-apis" names="inter-app\ apis">
        <title>Inter-app APIs</title>
        <section ids="status" names="status">
            <title>Status</title>
            <paragraph>Accepted</paragraph>
        </section>
        <section ids="context" names="context">
            <title>Context</title>
            <paragraph>The edx-platform Django project is a conglomeration of different LMS and Studio
                features written in the structure of Django apps. Over the years, the boundaries
                between features have become muddled for various reasons. We now find apps
                intruding into the Python innards of other apps, making the intrusive apps
                tightly dependent on the inner behaviors of other apps.</paragraph>
            <paragraph>Due to this lack of clearly delimited separation of concerns, the monolith has
                become hard to maneuver, comprehend, and modify.</paragraph>
        </section>
        <section ids="decisions" names="decisions">
            <title>Decisions</title>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>Each Django app should clearly define a set of Python APIs that it exposes to
                        other Django apps, which run within the LMS/Studio process.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Each app’s Python APIs should be defined/exported in a Python module called
                        “api.py”, located in the top-most directory of the app.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>The app’s Python APIs should be well-named, self-consistent, and relevant to
                        its own “domain” (without exposing technical and implementation details).</paragraph>
                </list_item>
                <list_item>
                    <paragraph>An app’s Django models and other internal data structures should not be
                        exposed via its Python APIs.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Ideally, tests should use only Python APIs declared in other apps’ “api.py”
                        files. However, if an app’s API is needed only for testing (and not needed as
                        part of the app’s domain API), then test-relevant Python APIs should be
                        defined/exported in an intentional Python module called “api_for_tests.py”.</paragraph>
                </list_item>
            </enumerated_list>
            <section ids="exmaples" names="exmaples">
                <title>Exmaples</title>
                <paragraph>As a reference example, see the Python APIs exposed by the grades app in the
                    <reference name="grades/api.py module" refuri="https://github.com/openedx/edx-platform/blob/master/lms/djangoapps/grades/api.py">grades/api.py module</reference>.</paragraph>
                <target ids="grades-api-py-module" names="grades/api.py\ module" refuri="https://github.com/openedx/edx-platform/blob/master/lms/djangoapps/grades/api.py"></target>
            </section>
        </section>
        <section ids="consequences" names="consequences">
            <title>Consequences</title>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>Explicitly defining Python APIs will prevent the proliferation of unintended
                        entanglement between apps in the monolith.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>When developers invest time in carefully considering Python APIs, they will
                        need to consider good SOLID design practices for abstractions and
                        encapsulation, leading to cleaner and more comprehensible code.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Python clients outside of an app will interface only through declared APIs in
                        either “api.py” or “test_api.py” (or exported via an api/__init__.py). The
                        provider app therefore has better control and oversight to support its
                        intentional APIs.</paragraph>
                </list_item>
            </enumerated_list>
        </section>
    </section>
</document>
