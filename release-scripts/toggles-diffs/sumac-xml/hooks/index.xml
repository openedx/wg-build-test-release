<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.21.2 -->
<document source="/Users/sarinacanelake/static-clones/edx-platform/docs/hooks/index.rst" translation_progress="{'total': 0, 'translated': 0}" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:http="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <section ids="open-edx-hooks-extension-framework" names="open\ edx\ hooks\ extension\ framework">
        <title>Open edX Hooks Extension Framework</title>
        <paragraph>To sustain the growth of the Open edX ecosystem, the business rules of the
            platform must be open for extension following the open-closed principle. This
            framework allows developers to do just that without needing to fork and modify
            the main edx-platform repository.</paragraph>
        <section ids="context" names="context">
            <title>Context</title>
            <paragraph>Hooks are predefined places in the edx-platform core where externally defined
                functions can take place. In some cases, those functions can alter what the user
                sees or experiences in the platform. Other cases are informative only. All cases
                are meant to be extended using Open edX plugins and configuration.</paragraph>
            <paragraph>Hooks can be of two types, events and filters. Events are in essence signals, in
                that they are sent in specific application places and whose listeners can extend
                functionality. On the other hand Filters are passed data and can act on it
                before this data is put back in the original application flow. In order to allow
                extension developers to use the Events and Filters definitions on their plugins,
                both kinds of hooks are defined in lightweight external libraries.</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>openedx-filters (<reference name="guide" refuri="./filters.rst">guide</reference><target dupnames="guide" ids="guide" refuri="./filters.rst"></target>, <reference name="source code" refuri="https://github.com/openedx/openedx-filters">source code</reference><target dupnames="source\ code" ids="source-code" refuri="https://github.com/openedx/openedx-filters"></target>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph>openedx-events (<reference name="guide" refuri="./events.rst">guide</reference><target dupnames="guide" ids="id1" refuri="./events.rst"></target>, <reference name="source code" refuri="https://github.com/openedx/openedx-events">source code</reference><target dupnames="source\ code" ids="id2" refuri="https://github.com/openedx/openedx-events"></target>)</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Hooks are designed with stability in mind. The main goal is that developers can
                use them to change the functionality of the platform as needed and still be able
                to migrate to newer open releases with very little to no development effort. In
                the case of the events, this is detailed in the <reference name="versioning ADR" refuri="https://github.com/eduNEXT/openedx-events/blob/main/docs/decisions/0002-events-naming-and-versioning.rst">versioning ADR</reference> and the
                <reference name="payload ADR" refuri="https://github.com/eduNEXT/openedx-events/blob/main/docs/decisions/0003-events-payload.rst">payload ADR</reference>.</paragraph>
            <paragraph>A longer description of the framework and itâ€™s history can be found in <reference name="OEP 50" refuri="https://open-edx-proposals.readthedocs.io/en/latest/oep-0050-hooks-extension-framework.html">OEP 50</reference>.</paragraph>
            <target ids="oep-50" names="oep\ 50" refuri="https://open-edx-proposals.readthedocs.io/en/latest/oep-0050-hooks-extension-framework.html"></target>
            <target ids="versioning-adr" names="versioning\ adr" refuri="https://github.com/eduNEXT/openedx-events/blob/main/docs/decisions/0002-events-naming-and-versioning.rst"></target>
            <target ids="payload-adr" names="payload\ adr" refuri="https://github.com/eduNEXT/openedx-events/blob/main/docs/decisions/0003-events-payload.rst"></target>
            <paragraph>On the technical side events are implemented through django signals which makes
                them run in the same python process as the lms or cms. Furthermore, events block
                the running process. Listeners of an event are encouraged to monitor the
                performance or use alternative arch patterns such as receiving the event and
                defer to launching async tasks than do the slow processing.</paragraph>
            <paragraph>On the other hand, filters are implemented using a pipeline mechanism, that executes
                a list of functions called <literal>steps</literal> configured through Django settings. Each
                pipeline step receives a dictionary with data, process it and returns an output. During
                this process, they can alter the application execution flow by halting the process
                or modifying their input arguments.</paragraph>
        </section>
    </section>
</document>
