<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.21.2 -->
<document source="/Users/sarinacanelake/static-clones/edx-platform/docs/references/docstrings/openedx/openedx.core.djangoapps.cache_toolbox.rst" translation_progress="{'total': 0, 'translated': 0}" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:http="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <section ids="openedx-core-djangoapps-cache-toolbox-package" names="openedx.core.djangoapps.cache_toolbox\ package">
        <title>openedx.core.djangoapps.cache_toolbox package</title>
        <section ids="subpackages" names="subpackages">
            <title>Subpackages</title>
            <compound classes="toctree-wrapper">
                <compact_paragraph toctree="True"><bullet_list><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="openedx.core.djangoapps.cache_toolbox.templatetags">openedx.core.djangoapps.cache_toolbox.templatetags package</reference></compact_paragraph><bullet_list><list_item classes="toctree-l2"><compact_paragraph classes="toctree-l2"><reference anchorname="#submodules" internal="True" refuri="openedx.core.djangoapps.cache_toolbox.templatetags#submodules">Submodules</reference></compact_paragraph></list_item><list_item classes="toctree-l2"><compact_paragraph classes="toctree-l2"><reference anchorname="#openedx-core-djangoapps-cache-toolbox-templatetags-cache-toolbox-module" internal="True" refuri="openedx.core.djangoapps.cache_toolbox.templatetags#openedx-core-djangoapps-cache-toolbox-templatetags-cache-toolbox-module">openedx.core.djangoapps.cache_toolbox.templatetags.cache_toolbox module</reference></compact_paragraph></list_item><list_item classes="toctree-l2"><compact_paragraph classes="toctree-l2"><reference anchorname="#module-openedx.core.djangoapps.cache_toolbox.templatetags" internal="True" refuri="openedx.core.djangoapps.cache_toolbox.templatetags#module-openedx.core.djangoapps.cache_toolbox.templatetags">Module contents</reference></compact_paragraph></list_item></bullet_list></list_item></bullet_list></compact_paragraph>
            </compound>
        </section>
        <section ids="submodules" names="submodules">
            <title>Submodules</title>
        </section>
        <section ids="module-openedx.core.djangoapps.cache_toolbox.app_settings openedx-core-djangoapps-cache-toolbox-app-settings-module" names="openedx.core.djangoapps.cache_toolbox.app_settings\ module">
            <title>openedx.core.djangoapps.cache_toolbox.app_settings module</title>
            <index entries="['pair',\ 'module;\ openedx.core.djangoapps.cache_toolbox.app_settings',\ 'module-openedx.core.djangoapps.cache_toolbox.app_settings',\ '',\ None]"></index>
            <paragraph>Settings for cache_toolbox.</paragraph>
        </section>
        <section ids="module-openedx.core.djangoapps.cache_toolbox.core openedx-core-djangoapps-cache-toolbox-core-module" names="openedx.core.djangoapps.cache_toolbox.core\ module">
            <title>openedx.core.djangoapps.cache_toolbox.core module</title>
            <index entries="['pair',\ 'module;\ openedx.core.djangoapps.cache_toolbox.core',\ 'module-openedx.core.djangoapps.cache_toolbox.core',\ '',\ None]"></index>
            <section ids="core-methods" names="core\ methods">
                <title>Core methods</title>
            </section>
            <index entries="['single',\ 'delete_instance()\ (in\ module\ openedx.core.djangoapps.cache_toolbox.core)',\ 'openedx.core.djangoapps.cache_toolbox.core.delete_instance',\ '',\ None]"></index>
            <desc classes="py function" desctype="function" domain="py" no-contents-entry="False" no-index="False" no-index-entry="False" no-typesetting="False" nocontentsentry="False" noindex="False" noindexentry="False" objtype="function">
                <desc_signature _toc_name="delete_instance()" _toc_parts="openedx.core.djangoapps.cache_toolbox.core delete_instance" class="" classes="sig sig-object py" fullname="delete_instance" ids="openedx.core.djangoapps.cache_toolbox.core.delete_instance" module="openedx.core.djangoapps.cache_toolbox.core"><desc_addname classes="sig-prename descclassname" xml:space="preserve">openedx.core.djangoapps.cache_toolbox.core.</desc_addname><desc_name classes="sig-name descname" xml:space="preserve">delete_instance</desc_name><desc_parameterlist multi_line_parameter_list="False" xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n">model</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_operator classes="o">*</desc_sig_operator><desc_sig_name classes="n">instance_or_pk</desc_sig_name></desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Purges the cache keys for the instances of this model.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'get_instance()\ (in\ module\ openedx.core.djangoapps.cache_toolbox.core)',\ 'openedx.core.djangoapps.cache_toolbox.core.get_instance',\ '',\ None]"></index>
            <desc classes="py function" desctype="function" domain="py" no-contents-entry="False" no-index="False" no-index-entry="False" no-typesetting="False" nocontentsentry="False" noindex="False" noindexentry="False" objtype="function">
                <desc_signature _toc_name="get_instance()" _toc_parts="openedx.core.djangoapps.cache_toolbox.core get_instance" class="" classes="sig sig-object py" fullname="get_instance" ids="openedx.core.djangoapps.cache_toolbox.core.get_instance" module="openedx.core.djangoapps.cache_toolbox.core"><desc_addname classes="sig-prename descclassname" xml:space="preserve">openedx.core.djangoapps.cache_toolbox.core.</desc_addname><desc_name classes="sig-name descname" xml:space="preserve">get_instance</desc_name><desc_parameterlist multi_line_parameter_list="False" xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n">model</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n">instance_or_pk</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n">timeout</desc_sig_name><desc_sig_operator classes="o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">None</inline></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n">using</desc_sig_name><desc_sig_operator classes="o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">None</inline></desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns the <literal>model</literal> instance with a primary key of <literal>instance_or_pk</literal>.</paragraph>
                    <paragraph>If the data is cached it will be returned from there, otherwise the regular
                        Django ORM is queried for this instance and the data stored in the cache.</paragraph>
                    <paragraph>If omitted, the timeout value defaults to
                        <literal>settings.CACHE_TOOLBOX_DEFAULT_TIMEOUT</literal> instead of 0 (zero).</paragraph>
                    <paragraph>Example:</paragraph>
                    <literal_block force="False" language="default" linenos="False" xml:space="preserve">&gt;&gt;&gt; get_instance(User, 1) # Cache miss
&lt;User: lamby&gt;
&gt;&gt;&gt; get_instance(User, 1) # Cache hit
&lt;User: lamby&gt;
&gt;&gt;&gt; User.objects.get(pk=1) == get_instance(User, 1)
True</literal_block>
                </desc_content>
            </desc>
            <index entries="['single',\ 'instance_key()\ (in\ module\ openedx.core.djangoapps.cache_toolbox.core)',\ 'openedx.core.djangoapps.cache_toolbox.core.instance_key',\ '',\ None]"></index>
            <desc classes="py function" desctype="function" domain="py" no-contents-entry="False" no-index="False" no-index-entry="False" no-typesetting="False" nocontentsentry="False" noindex="False" noindexentry="False" objtype="function">
                <desc_signature _toc_name="instance_key()" _toc_parts="openedx.core.djangoapps.cache_toolbox.core instance_key" class="" classes="sig sig-object py" fullname="instance_key" ids="openedx.core.djangoapps.cache_toolbox.core.instance_key" module="openedx.core.djangoapps.cache_toolbox.core"><desc_addname classes="sig-prename descclassname" xml:space="preserve">openedx.core.djangoapps.cache_toolbox.core.</desc_addname><desc_name classes="sig-name descname" xml:space="preserve">instance_key</desc_name><desc_parameterlist multi_line_parameter_list="False" xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n">model</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n">instance_or_pk</desc_sig_name></desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns the cache key for this (model, instance) pair.</paragraph>
                </desc_content>
            </desc>
        </section>
        <section ids="module-openedx.core.djangoapps.cache_toolbox.middleware openedx-core-djangoapps-cache-toolbox-middleware-module" names="openedx.core.djangoapps.cache_toolbox.middleware\ module">
            <title>openedx.core.djangoapps.cache_toolbox.middleware module</title>
            <index entries="['pair',\ 'module;\ openedx.core.djangoapps.cache_toolbox.middleware',\ 'module-openedx.core.djangoapps.cache_toolbox.middleware',\ '',\ None]"></index>
            <section ids="cache-backed-authenticationmiddleware" names="cache-backed\ authenticationmiddleware">
                <title>Cache-backed <literal>AuthenticationMiddleware</literal></title>
                <paragraph><literal>CacheBackedAuthenticationMiddleware</literal> is an
                    <literal>django.contrib.auth.middleware.AuthenticationMiddleware</literal> replacement to
                    avoid querying the database for a <literal>User</literal> instance in each request.</paragraph>
                <paragraph>Whilst the built-in <literal>AuthenticationMiddleware</literal> mechanism will only obtain the
                    <literal>User</literal> instance when it is required, the vast majority of sites will do so on
                    every page to render “Logged in as ‘X’” text as well to evaluate the result of
                    <literal>user.is_authenticated</literal> and <literal>user.is_superuser</literal> to provide conditional
                    functionality.</paragraph>
                <paragraph>This middleware eliminates the cost of retrieving this <literal>User</literal> instance by
                    caching it using the <literal>cache_toolbox</literal> instance caching mechanisms.</paragraph>
                <paragraph>Depending on your average number of queries per page, saving one query per
                    request can—in aggregate—reduce load on your database. In addition,
                    avoiding the database entirely for pages can avoid incurring any connection
                    latency in your environment, resulting in faster page loads for your users.</paragraph>
                <paragraph>Saving this data in the cache can also be used as a way of authenticating users
                    in systems outside of Django that should not access your database.  For
                    example, a “maintenance mode” page would be able to render a personalised
                    message without touching the database at all but rather authenticating via the
                    cache.</paragraph>
                <paragraph><literal>CacheBackedAuthenticationMiddleware</literal> is <literal>AUTHENTICATION_BACKENDS</literal> agnostic.</paragraph>
                <section ids="implementation" names="implementation">
                    <title>Implementation</title>
                    <paragraph>The cache and session backends are still accessed on each request - we are
                        simply assuming that they are cheaper (or otherwise more preferable) to access
                        than your database. (In the future, signed cookies may allow us to avoid this
                        lookup altogether – whilst we could not safely save <literal>User.password</literal> in a
                        cookie, we could use delayed loading to pull it out when needed.)</paragraph>
                    <paragraph>Another alternative solution would be to store the attributes in the user’s
                        session instead of in the cache. This would save the cache hit on every request
                        as all the relevant data would be pulled in one go from the session backend.
                        However, this has two main disadvantages:</paragraph>
                    <block_quote>
                        <bullet_list bullet="*">
                            <list_item>
                                <paragraph>Session keys are not deterministic – after making changes to an
                                    <literal>auth_user</literal> row in the database, you cannot determine the user’s session
                                    key to flush the now out-of-sync data (and doing so would log them out
                                    anyway).</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Stores data per-session rather than per-user – if a user logs in from
                                    multiple computers the data is duplicated in each session. This problem is
                                    compounded by most projects wishing to avoid expiring session data as long
                                    as possible (in addition to storing sessions in persistent stores).</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </section>
                <section ids="dependency-with-safesessionmiddleware" names="dependency\ with\ safesessionmiddleware">
                    <title>Dependency with SafeSessionMiddleware</title>
                    <paragraph>CacheBackedAuthenticationMiddleware middleware logs out the user if the
                        session hash is changed due to password change. It flushes the session
                        and mark cookies for deletion in request which are then deleted in the
                        process_response of SafeSessionMiddleware.</paragraph>
                </section>
                <section dupnames="usage" ids="usage">
                    <title>Usage</title>
                    <paragraph>To use, find <literal>MIDDLEWARE</literal> in your <literal>settings.py</literal> and replace:</paragraph>
                    <literal_block force="False" language="default" linenos="False" xml:space="preserve">MIDDLEWARE = [
    ...
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    ...
]</literal_block>
                    <paragraph>with:</paragraph>
                    <literal_block force="False" language="default" linenos="False" xml:space="preserve">MIDDLEWARE = [
    ...
    'openedx.core.djangoapps.cache_toolbox.middleware.CacheBackedAuthenticationMiddleware',
    ...
]</literal_block>
                    <paragraph>You should confirm you are using a <literal>SESSION_ENGINE</literal> that doesn’t query the
                        database for each request. The built-in <literal>cached_db</literal> engine is the safest
                        choice for most environments but you may be happy with the trade-offs of the
                        <literal>memcached</literal> backend - see the Django documentation for more details.</paragraph>
                </section>
            </section>
            <index entries="['single',\ 'CacheBackedAuthenticationMiddleware\ (class\ in\ openedx.core.djangoapps.cache_toolbox.middleware)',\ 'openedx.core.djangoapps.cache_toolbox.middleware.CacheBackedAuthenticationMiddleware',\ '',\ None]"></index>
            <desc classes="py class" desctype="class" domain="py" no-contents-entry="False" no-index="False" no-index-entry="False" no-typesetting="False" nocontentsentry="False" noindex="False" noindexentry="False" objtype="class">
                <desc_signature _toc_name="CacheBackedAuthenticationMiddleware" _toc_parts="openedx.core.djangoapps.cache_toolbox.middleware CacheBackedAuthenticationMiddleware" class="" classes="sig sig-object py" fullname="CacheBackedAuthenticationMiddleware" ids="openedx.core.djangoapps.cache_toolbox.middleware.CacheBackedAuthenticationMiddleware" module="openedx.core.djangoapps.cache_toolbox.middleware"><desc_annotation xml:space="preserve">class<desc_sig_space classes="w"> </desc_sig_space></desc_annotation><desc_addname classes="sig-prename descclassname" xml:space="preserve">openedx.core.djangoapps.cache_toolbox.middleware.</desc_addname><desc_name classes="sig-name descname" xml:space="preserve">CacheBackedAuthenticationMiddleware</desc_name><desc_parameterlist multi_line_parameter_list="False" xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_operator classes="o">*</desc_sig_operator><desc_sig_name classes="n">args</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_operator classes="o">**</desc_sig_operator><desc_sig_name classes="n">kwargs</desc_sig_name></desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <reference internal="False" reftitle="(in Django v4.2)" refuri="https://docs.djangoproject.com/en/4.2/ref/middleware/#django.contrib.auth.middleware.AuthenticationMiddleware"><literal classes="xref py py-class">AuthenticationMiddleware</literal></reference>, <reference internal="False" reftitle="(in Django v4.2)" refuri="https://docs.djangoproject.com/en/4.2/topics/http/middleware/#django.utils.deprecation.MiddlewareMixin"><literal classes="xref py py-class">MiddlewareMixin</literal></reference></paragraph>
                    <paragraph>See documentation above.</paragraph>
                    <index entries="['single',\ 'process_request()\ (openedx.core.djangoapps.cache_toolbox.middleware.CacheBackedAuthenticationMiddleware\ method)',\ 'openedx.core.djangoapps.cache_toolbox.middleware.CacheBackedAuthenticationMiddleware.process_request',\ '',\ None]"></index>
                    <desc classes="py method" desctype="method" domain="py" no-contents-entry="False" no-index="False" no-index-entry="False" no-typesetting="False" nocontentsentry="False" noindex="False" noindexentry="False" objtype="method">
                        <desc_signature _toc_name="CacheBackedAuthenticationMiddleware.process_request()" _toc_parts="openedx.core.djangoapps.cache_toolbox.middleware CacheBackedAuthenticationMiddleware process_request" class="CacheBackedAuthenticationMiddleware" classes="sig sig-object py" fullname="CacheBackedAuthenticationMiddleware.process_request" ids="openedx.core.djangoapps.cache_toolbox.middleware.CacheBackedAuthenticationMiddleware.process_request" module="openedx.core.djangoapps.cache_toolbox.middleware"><desc_name classes="sig-name descname" xml:space="preserve">process_request</desc_name><desc_parameterlist multi_line_parameter_list="False" xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n">request</desc_sig_name></desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
        </section>
        <section ids="module-openedx.core.djangoapps.cache_toolbox.model openedx-core-djangoapps-cache-toolbox-model-module" names="openedx.core.djangoapps.cache_toolbox.model\ module">
            <title>openedx.core.djangoapps.cache_toolbox.model module</title>
            <index entries="['pair',\ 'module;\ openedx.core.djangoapps.cache_toolbox.model',\ 'module-openedx.core.djangoapps.cache_toolbox.model',\ '',\ None]"></index>
            <section ids="caching-model-instances" names="caching\ model\ instances">
                <title>Caching model instances</title>
                <paragraph><literal>cache_model</literal> adds utility methods to a model to obtain <literal>ForeignKey</literal>
                    instances via the cache.</paragraph>
                <section dupnames="usage" ids="id1">
                    <title>Usage</title>
                    <literal_block force="False" language="default" linenos="False" xml:space="preserve">from django.db import models
from django.contrib.auth.models import User

class Foo(models.Model):
    name = models.CharField(length=20)

cache_model(Foo)</literal_block>
                    <literal_block force="False" language="default" linenos="False" xml:space="preserve">&gt;&gt;&gt; a = Foo.objects.create(name='a')
&gt;&gt;&gt; a
&lt;Foo: &gt;
&gt;&gt;&gt; Foo.get_cached(a.pk) # Cache miss
&lt;Foo: &gt;
&gt;&gt;&gt; a = Foo.get_cached(a.pk) # Cache hit
&gt;&gt;&gt; a.name
u'a'</literal_block>
                    <paragraph>Instances returned from <literal>get_cached</literal> are real model instances:</paragraph>
                    <literal_block force="False" language="default" linenos="False" xml:space="preserve">&gt;&gt;&gt; a = Foo.get_cached(a.pk) # Cache hit
&gt;&gt;&gt; type(a)
&lt;class '__main__.models.A'&gt;
&gt;&gt;&gt; a.pk
1L</literal_block>
                </section>
                <section ids="invalidation" names="invalidation">
                    <title>Invalidation</title>
                    <paragraph>Invalidation is performed automatically upon saving or deleting a <literal>Foo</literal>
                        instance:</paragraph>
                    <literal_block force="False" language="default" linenos="False" xml:space="preserve">&gt;&gt;&gt; a = Foo.objects.create(name='a')
&gt;&gt;&gt; a.name = 'b'
&gt;&gt;&gt; a.save()
&gt;&gt;&gt; a = Foo.get_cached(a.pk)
&gt;&gt;&gt; a.name
u'b'
&gt;&gt;&gt; a.delete()
&gt;&gt;&gt; a = Foo.get_cached(a.pk)
... Foo.DoesNotExist</literal_block>
                </section>
            </section>
            <index entries="['single',\ 'cache_model()\ (in\ module\ openedx.core.djangoapps.cache_toolbox.model)',\ 'openedx.core.djangoapps.cache_toolbox.model.cache_model',\ '',\ None]"></index>
            <desc classes="py function" desctype="function" domain="py" no-contents-entry="False" no-index="False" no-index-entry="False" no-typesetting="False" nocontentsentry="False" noindex="False" noindexentry="False" objtype="function">
                <desc_signature _toc_name="cache_model()" _toc_parts="openedx.core.djangoapps.cache_toolbox.model cache_model" class="" classes="sig sig-object py" fullname="cache_model" ids="openedx.core.djangoapps.cache_toolbox.model.cache_model" module="openedx.core.djangoapps.cache_toolbox.model"><desc_addname classes="sig-prename descclassname" xml:space="preserve">openedx.core.djangoapps.cache_toolbox.model.</desc_addname><desc_name classes="sig-name descname" xml:space="preserve">cache_model</desc_name><desc_parameterlist multi_line_parameter_list="False" xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n">model</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n">timeout</desc_sig_name><desc_sig_operator classes="o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">None</inline></desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Adds utility methods to the given model to obtain
                        <literal>ForeignKey</literal> instances via the cache.</paragraph>
                </desc_content>
            </desc>
        </section>
        <section ids="module-openedx.core.djangoapps.cache_toolbox module-contents" names="module\ contents">
            <title>Module contents</title>
            <index entries="['pair',\ 'module;\ openedx.core.djangoapps.cache_toolbox',\ 'module-openedx.core.djangoapps.cache_toolbox',\ '',\ None]"></index>
            <section ids="cache-toolbox-non-magical-object-caching-tools-for-django" names="cache_toolbox\ ---\ non-magical\ object\ caching\ tools\ for\ django">
                <title><literal classes="xref py py-mod">cache_toolbox</literal> — Non-magical object caching tools for Django</title>
                <section ids="introduction" names="introduction">
                    <title>Introduction</title>
                    <paragraph><literal>cache_toolbox</literal> is intended to be a lightweight series of independent tools
                        to leverage caching within Django projects.</paragraph>
                    <paragraph>The tools are deliberately <title_reference>non-magical</title_reference>. That is to say, instances are never
                        retrieved from caches behind your back and regular Django <literal>.filter()</literal> /
                        <literal>.get()</literal> queries continue to work exactly as before.</paragraph>
                    <paragraph>Because of this, you can introduce <literal>cache_toolbox</literal> into your project slowly
                        when needed rather than “switching” to it with invasive changes.</paragraph>
                </section>
                <section ids="links" names="links">
                    <title>Links</title>
                    <definition_list>
                        <definition_list_item>
                            <term>View/download code</term>
                            <definition>
                                <paragraph><reference refuri="https://github.com/playfire/django-cache-toolbox">https://github.com/playfire/django-cache-toolbox</reference></paragraph>
                            </definition>
                        </definition_list_item>
                        <definition_list_item>
                            <term>File a bug</term>
                            <definition>
                                <paragraph><reference refuri="https://github.com/playfire/django-cache-toolbox/issues">https://github.com/playfire/django-cache-toolbox/issues</reference></paragraph>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                </section>
            </section>
        </section>
    </section>
</document>
