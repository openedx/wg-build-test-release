<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.21.2 -->
<document source="/Users/sarinacanelake/static-clones/edx-platform/docs/references/docstrings/openedx/openedx.core.lib.xblock_services.rst" translation_progress="{'total': 0, 'translated': 0}" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:http="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <section ids="openedx-core-lib-xblock-services-package" names="openedx.core.lib.xblock_services\ package">
        <title>openedx.core.lib.xblock_services package</title>
        <section ids="submodules" names="submodules">
            <title>Submodules</title>
        </section>
        <section ids="module-openedx.core.lib.xblock_services.call_to_action openedx-core-lib-xblock-services-call-to-action-module" names="openedx.core.lib.xblock_services.call_to_action\ module">
            <title>openedx.core.lib.xblock_services.call_to_action module</title>
            <index entries="['pair',\ 'module;\ openedx.core.lib.xblock_services.call_to_action',\ 'module-openedx.core.lib.xblock_services.call_to_action',\ '',\ None]"></index>
            <paragraph>A module containing the CallToActionService which can be used for an xblock Runtime to supply
                specific CTAs for specific XBlock contexts.</paragraph>
            <index entries="['single',\ 'CallToActionService\ (class\ in\ openedx.core.lib.xblock_services.call_to_action)',\ 'openedx.core.lib.xblock_services.call_to_action.CallToActionService',\ '',\ None]"></index>
            <desc classes="py class" desctype="class" domain="py" no-contents-entry="False" no-index="False" no-index-entry="False" no-typesetting="False" nocontentsentry="False" noindex="False" noindexentry="False" objtype="class">
                <desc_signature _toc_name="CallToActionService" _toc_parts="openedx.core.lib.xblock_services.call_to_action CallToActionService" class="" classes="sig sig-object py" fullname="CallToActionService" ids="openedx.core.lib.xblock_services.call_to_action.CallToActionService" module="openedx.core.lib.xblock_services.call_to_action"><desc_annotation xml:space="preserve">class<desc_sig_space classes="w"> </desc_sig_space></desc_annotation><desc_addname classes="sig-prename descclassname" xml:space="preserve">openedx.core.lib.xblock_services.call_to_action.</desc_addname><desc_name classes="sig-name descname" xml:space="preserve">CallToActionService</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">PluginManager</literal></paragraph>
                    <paragraph>An XBlock service that returns information on how to shift a learner’s schedule.</paragraph>
                    <index entries="['single',\ 'NAMESPACE\ (openedx.core.lib.xblock_services.call_to_action.CallToActionService\ attribute)',\ 'openedx.core.lib.xblock_services.call_to_action.CallToActionService.NAMESPACE',\ '',\ None]"></index>
                    <desc classes="py attribute" desctype="attribute" domain="py" no-contents-entry="False" no-index="False" no-index-entry="False" no-typesetting="False" nocontentsentry="False" noindex="False" noindexentry="False" objtype="attribute">
                        <desc_signature _toc_name="CallToActionService.NAMESPACE" _toc_parts="openedx.core.lib.xblock_services.call_to_action CallToActionService NAMESPACE" class="CallToActionService" classes="sig sig-object py" fullname="CallToActionService.NAMESPACE" ids="openedx.core.lib.xblock_services.call_to_action.CallToActionService.NAMESPACE" module="openedx.core.lib.xblock_services.call_to_action"><desc_name classes="sig-name descname" xml:space="preserve">NAMESPACE</desc_name><desc_annotation xml:space="preserve"><desc_sig_space classes="w"> </desc_sig_space><desc_sig_punctuation classes="p">=</desc_sig_punctuation><desc_sig_space classes="w"> </desc_sig_space>'openedx.call_to_action'</desc_annotation></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ 'get_ctas()\ (openedx.core.lib.xblock_services.call_to_action.CallToActionService\ method)',\ 'openedx.core.lib.xblock_services.call_to_action.CallToActionService.get_ctas',\ '',\ None]"></index>
                    <desc classes="py method" desctype="method" domain="py" no-contents-entry="False" no-index="False" no-index-entry="False" no-typesetting="False" nocontentsentry="False" noindex="False" noindexentry="False" objtype="method">
                        <desc_signature _toc_name="CallToActionService.get_ctas()" _toc_parts="openedx.core.lib.xblock_services.call_to_action CallToActionService get_ctas" class="CallToActionService" classes="sig sig-object py" fullname="CallToActionService.get_ctas" ids="openedx.core.lib.xblock_services.call_to_action.CallToActionService.get_ctas" module="openedx.core.lib.xblock_services.call_to_action"><desc_name classes="sig-name descname" xml:space="preserve">get_ctas</desc_name><desc_parameterlist multi_line_parameter_list="False" xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n">xblock</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n">category</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n">completion</desc_sig_name><desc_sig_operator classes="o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">False</inline></desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return the calls to action associated with the specified category for the given xblock.</paragraph>
                            <paragraph>See the CallToActionService class constants for a list of recognized categories.</paragraph>
                            <definition_list>
                                <definition_list_item>
                                    <term>Returns: list of dictionaries, describing the calls to action, with the following keys:</term>
                                    <definition>
                                        <paragraph>link, link_name, form_values, and description (which can include html tags).
                                            If the category is not recognized, an empty list is returned.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <paragraph>An example of a returned list:
                                [{</paragraph>
                            <block_quote>
                                <paragraph>‘link’: ‘localhost:18000/skip’,  # A link to POST to when the Call To Action is taken
                                    ‘link_name’: ‘Skip this Problem’,  # The name of the action
                                    ‘form_values’: {  # Any parameters to include with the CTA</paragraph>
                                <block_quote>
                                    <paragraph>‘foo’: ‘bar’,</paragraph>
                                </block_quote>
                                <paragraph>},
                                    # A long-form description to be associated with the CTA
                                    ‘description’: “If you don’t want to do this problem, just skip it!”,
                                    # A data set we include if the CTA is being rendered within an iframe. For example,
                                    # we do this in Learning MFE. This dictionary is passed to its parent container via
                                    # parent.postMessage.  Parent containers should use window.onmessage event handler to
                                    # catch this dataset.
                                    ‘event_data’: {</paragraph>
                                <block_quote>
                                    <paragraph>‘foo’: ‘bar’,</paragraph>
                                </block_quote>
                                <paragraph>},</paragraph>
                            </block_quote>
                            <paragraph>}]</paragraph>
                            <paragraph>Note: Future versions of this class may add a way to control the CTA method (POST vs GET),
                                and would need to existing installed plugins to use the POST method.</paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
        </section>
        <section ids="module-openedx.core.lib.xblock_services module-contents" names="module\ contents">
            <title>Module contents</title>
            <index entries="['pair',\ 'module;\ openedx.core.lib.xblock_services',\ 'module-openedx.core.lib.xblock_services',\ '',\ None]"></index>
        </section>
    </section>
</document>
