<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.21.2 -->
<document source="/Users/sarinacanelake/static-clones/edx-platform/docs/references/docstrings/openedx/openedx.core.djangoapps.util.management.commands.rst" translation_progress="{'total': 0, 'translated': 0}" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:http="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <section ids="openedx-core-djangoapps-util-management-commands-package" names="openedx.core.djangoapps.util.management.commands\ package">
        <title>openedx.core.djangoapps.util.management.commands package</title>
        <section ids="submodules" names="submodules">
            <title>Submodules</title>
        </section>
        <section ids="module-openedx.core.djangoapps.util.management.commands.print_setting openedx-core-djangoapps-util-management-commands-print-setting-module" names="openedx.core.djangoapps.util.management.commands.print_setting\ module">
            <title>openedx.core.djangoapps.util.management.commands.print_setting module</title>
            <index entries="['pair',\ 'module;\ openedx.core.djangoapps.util.management.commands.print_setting',\ 'module-openedx.core.djangoapps.util.management.commands.print_setting',\ '',\ None]"></index>
            <section ids="print-setting" names="print_setting">
                <title>print_setting</title>
                <paragraph>Django command to output a single Django setting.
                    Useful when paver or a shell script needs such a value.</paragraph>
                <paragraph>This handles the one specific use case of the “print_settings” command from
                    django-extensions that we were actually using.</paragraph>
            </section>
            <index entries="['single',\ 'Command\ (class\ in\ openedx.core.djangoapps.util.management.commands.print_setting)',\ 'openedx.core.djangoapps.util.management.commands.print_setting.Command',\ '',\ None]"></index>
            <desc classes="py class" desctype="class" domain="py" no-contents-entry="False" no-index="False" no-index-entry="False" no-typesetting="False" nocontentsentry="False" noindex="False" noindexentry="False" objtype="class">
                <desc_signature _toc_name="Command" _toc_parts="openedx.core.djangoapps.util.management.commands.print_setting Command" class="" classes="sig sig-object py" fullname="Command" ids="openedx.core.djangoapps.util.management.commands.print_setting.Command" module="openedx.core.djangoapps.util.management.commands.print_setting"><desc_annotation xml:space="preserve">class<desc_sig_space classes="w"> </desc_sig_space></desc_annotation><desc_addname classes="sig-prename descclassname" xml:space="preserve">openedx.core.djangoapps.util.management.commands.print_setting.</desc_addname><desc_name classes="sig-name descname" xml:space="preserve">Command</desc_name><desc_parameterlist multi_line_parameter_list="False" xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n">stdout</desc_sig_name><desc_sig_operator classes="o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">None</inline></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n">stderr</desc_sig_name><desc_sig_operator classes="o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">None</inline></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n">no_color</desc_sig_name><desc_sig_operator classes="o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">False</inline></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n">force_color</desc_sig_name><desc_sig_operator classes="o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">False</inline></desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">BaseCommand</literal></paragraph>
                    <paragraph>print_setting command</paragraph>
                    <index entries="['single',\ 'add_arguments()\ (openedx.core.djangoapps.util.management.commands.print_setting.Command\ method)',\ 'openedx.core.djangoapps.util.management.commands.print_setting.Command.add_arguments',\ '',\ None]"></index>
                    <desc classes="py method" desctype="method" domain="py" no-contents-entry="False" no-index="False" no-index-entry="False" no-typesetting="False" nocontentsentry="False" noindex="False" noindexentry="False" objtype="method">
                        <desc_signature _toc_name="Command.add_arguments()" _toc_parts="openedx.core.djangoapps.util.management.commands.print_setting Command add_arguments" class="Command" classes="sig sig-object py" fullname="Command.add_arguments" ids="openedx.core.djangoapps.util.management.commands.print_setting.Command.add_arguments" module="openedx.core.djangoapps.util.management.commands.print_setting"><desc_name classes="sig-name descname" xml:space="preserve">add_arguments</desc_name><desc_parameterlist multi_line_parameter_list="False" xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n">parser</desc_sig_name></desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Entry point for subclassed commands to add custom arguments.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ 'handle()\ (openedx.core.djangoapps.util.management.commands.print_setting.Command\ method)',\ 'openedx.core.djangoapps.util.management.commands.print_setting.Command.handle',\ '',\ None]"></index>
                    <desc classes="py method" desctype="method" domain="py" no-contents-entry="False" no-index="False" no-index-entry="False" no-typesetting="False" nocontentsentry="False" noindex="False" noindexentry="False" objtype="method">
                        <desc_signature _toc_name="Command.handle()" _toc_parts="openedx.core.djangoapps.util.management.commands.print_setting Command handle" class="Command" classes="sig sig-object py" fullname="Command.handle" ids="openedx.core.djangoapps.util.management.commands.print_setting.Command.handle" module="openedx.core.djangoapps.util.management.commands.print_setting"><desc_name classes="sig-name descname" xml:space="preserve">handle</desc_name><desc_parameterlist multi_line_parameter_list="False" xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_operator classes="o">*</desc_sig_operator><desc_sig_name classes="n">args</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_operator classes="o">**</desc_sig_operator><desc_sig_name classes="n">options</desc_sig_name></desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>The actual logic of the command. Subclasses must implement
                                this method.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ 'help\ (openedx.core.djangoapps.util.management.commands.print_setting.Command\ attribute)',\ 'openedx.core.djangoapps.util.management.commands.print_setting.Command.help',\ '',\ None]"></index>
                    <desc classes="py attribute" desctype="attribute" domain="py" no-contents-entry="False" no-index="False" no-index-entry="False" no-typesetting="False" nocontentsentry="False" noindex="False" noindexentry="False" objtype="attribute">
                        <desc_signature _toc_name="Command.help" _toc_parts="openedx.core.djangoapps.util.management.commands.print_setting Command help" class="Command" classes="sig sig-object py" fullname="Command.help" ids="openedx.core.djangoapps.util.management.commands.print_setting.Command.help" module="openedx.core.djangoapps.util.management.commands.print_setting"><desc_name classes="sig-name descname" xml:space="preserve">help</desc_name><desc_annotation xml:space="preserve"><desc_sig_space classes="w"> </desc_sig_space><desc_sig_punctuation classes="p">=</desc_sig_punctuation><desc_sig_space classes="w"> </desc_sig_space>'Print the value of a single Django setting.'</desc_annotation></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
        </section>
        <section ids="module-openedx.core.djangoapps.util.management.commands.reset_db openedx-core-djangoapps-util-management-commands-reset-db-module" names="openedx.core.djangoapps.util.management.commands.reset_db\ module">
            <title>openedx.core.djangoapps.util.management.commands.reset_db module</title>
            <index entries="['pair',\ 'module;\ openedx.core.djangoapps.util.management.commands.reset_db',\ 'module-openedx.core.djangoapps.util.management.commands.reset_db',\ '',\ None]"></index>
            <section ids="reset-db" names="reset_db">
                <title>reset_db</title>
                <paragraph>Django command to drop and recreate a database.
                    Useful when running tests against a database which may previously have
                    had different migrations applied to it.</paragraph>
                <paragraph>This handles the one specific use case of the “reset_db” command from
                    django-extensions that we were actually using.</paragraph>
                <paragraph>originally from <reference refuri="http://www.djangosnippets.org/snippets/828/">http://www.djangosnippets.org/snippets/828/</reference> by dnordberg</paragraph>
            </section>
            <index entries="['single',\ 'Command\ (class\ in\ openedx.core.djangoapps.util.management.commands.reset_db)',\ 'openedx.core.djangoapps.util.management.commands.reset_db.Command',\ '',\ None]"></index>
            <desc classes="py class" desctype="class" domain="py" no-contents-entry="False" no-index="False" no-index-entry="False" no-typesetting="False" nocontentsentry="False" noindex="False" noindexentry="False" objtype="class">
                <desc_signature _toc_name="Command" _toc_parts="openedx.core.djangoapps.util.management.commands.reset_db Command" class="" classes="sig sig-object py" fullname="Command" ids="openedx.core.djangoapps.util.management.commands.reset_db.Command" module="openedx.core.djangoapps.util.management.commands.reset_db"><desc_annotation xml:space="preserve">class<desc_sig_space classes="w"> </desc_sig_space></desc_annotation><desc_addname classes="sig-prename descclassname" xml:space="preserve">openedx.core.djangoapps.util.management.commands.reset_db.</desc_addname><desc_name classes="sig-name descname" xml:space="preserve">Command</desc_name><desc_parameterlist multi_line_parameter_list="False" xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n">stdout</desc_sig_name><desc_sig_operator classes="o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">None</inline></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n">stderr</desc_sig_name><desc_sig_operator classes="o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">None</inline></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n">no_color</desc_sig_name><desc_sig_operator classes="o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">False</inline></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n">force_color</desc_sig_name><desc_sig_operator classes="o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">False</inline></desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bases: <literal classes="xref py py-class">BaseCommand</literal></paragraph>
                    <index entries="['single',\ 'add_arguments()\ (openedx.core.djangoapps.util.management.commands.reset_db.Command\ method)',\ 'openedx.core.djangoapps.util.management.commands.reset_db.Command.add_arguments',\ '',\ None]"></index>
                    <desc classes="py method" desctype="method" domain="py" no-contents-entry="False" no-index="False" no-index-entry="False" no-typesetting="False" nocontentsentry="False" noindex="False" noindexentry="False" objtype="method">
                        <desc_signature _toc_name="Command.add_arguments()" _toc_parts="openedx.core.djangoapps.util.management.commands.reset_db Command add_arguments" class="Command" classes="sig sig-object py" fullname="Command.add_arguments" ids="openedx.core.djangoapps.util.management.commands.reset_db.Command.add_arguments" module="openedx.core.djangoapps.util.management.commands.reset_db"><desc_name classes="sig-name descname" xml:space="preserve">add_arguments</desc_name><desc_parameterlist multi_line_parameter_list="False" xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n">parser</desc_sig_name></desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Entry point for subclassed commands to add custom arguments.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ 'handle()\ (openedx.core.djangoapps.util.management.commands.reset_db.Command\ method)',\ 'openedx.core.djangoapps.util.management.commands.reset_db.Command.handle',\ '',\ None]"></index>
                    <desc classes="py method" desctype="method" domain="py" no-contents-entry="False" no-index="False" no-index-entry="False" no-typesetting="False" nocontentsentry="False" noindex="False" noindexentry="False" objtype="method">
                        <desc_signature _toc_name="Command.handle()" _toc_parts="openedx.core.djangoapps.util.management.commands.reset_db Command handle" class="Command" classes="sig sig-object py" fullname="Command.handle" ids="openedx.core.djangoapps.util.management.commands.reset_db.Command.handle" module="openedx.core.djangoapps.util.management.commands.reset_db"><desc_name classes="sig-name descname" xml:space="preserve">handle</desc_name><desc_parameterlist multi_line_parameter_list="False" xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_operator classes="o">*</desc_sig_operator><desc_sig_name classes="n">args</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_operator classes="o">**</desc_sig_operator><desc_sig_name classes="n">options</desc_sig_name></desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Resets the database for this project.</paragraph>
                            <paragraph>Note: Transaction wrappers are in reverse as a work around for
                                autocommit, anybody know how to do this the right way?</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ 'help\ (openedx.core.djangoapps.util.management.commands.reset_db.Command\ attribute)',\ 'openedx.core.djangoapps.util.management.commands.reset_db.Command.help',\ '',\ None]"></index>
                    <desc classes="py attribute" desctype="attribute" domain="py" no-contents-entry="False" no-index="False" no-index-entry="False" no-typesetting="False" nocontentsentry="False" noindex="False" noindexentry="False" objtype="attribute">
                        <desc_signature _toc_name="Command.help" _toc_parts="openedx.core.djangoapps.util.management.commands.reset_db Command help" class="Command" classes="sig sig-object py" fullname="Command.help" ids="openedx.core.djangoapps.util.management.commands.reset_db.Command.help" module="openedx.core.djangoapps.util.management.commands.reset_db"><desc_name classes="sig-name descname" xml:space="preserve">help</desc_name><desc_annotation xml:space="preserve"><desc_sig_space classes="w"> </desc_sig_space><desc_sig_punctuation classes="p">=</desc_sig_punctuation><desc_sig_space classes="w"> </desc_sig_space>'Resets the database for this project.'</desc_annotation></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ 'parse_mysql_cnf()\ (in\ module\ openedx.core.djangoapps.util.management.commands.reset_db)',\ 'openedx.core.djangoapps.util.management.commands.reset_db.parse_mysql_cnf',\ '',\ None]"></index>
            <desc classes="py function" desctype="function" domain="py" no-contents-entry="False" no-index="False" no-index-entry="False" no-typesetting="False" nocontentsentry="False" noindex="False" noindexentry="False" objtype="function">
                <desc_signature _toc_name="parse_mysql_cnf()" _toc_parts="openedx.core.djangoapps.util.management.commands.reset_db parse_mysql_cnf" class="" classes="sig sig-object py" fullname="parse_mysql_cnf" ids="openedx.core.djangoapps.util.management.commands.reset_db.parse_mysql_cnf" module="openedx.core.djangoapps.util.management.commands.reset_db"><desc_addname classes="sig-prename descclassname" xml:space="preserve">openedx.core.djangoapps.util.management.commands.reset_db.</desc_addname><desc_name classes="sig-name descname" xml:space="preserve">parse_mysql_cnf</desc_name><desc_parameterlist multi_line_parameter_list="False" xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n">dbinfo</desc_sig_name></desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Attempt to parse mysql database config file for connection settings.
                        Ideally we would hook into django’s code to do this, but read_default_file is handled by the mysql C libs
                        so we have to emulate the behaviour</paragraph>
                    <paragraph>Settings that are missing will return ‘’
                        returns (user, password, database_name, database_host, database_port)</paragraph>
                </desc_content>
            </desc>
        </section>
        <section ids="module-openedx.core.djangoapps.util.management.commands module-contents" names="module\ contents">
            <title>Module contents</title>
            <index entries="['pair',\ 'module;\ openedx.core.djangoapps.util.management.commands',\ 'module-openedx.core.djangoapps.util.management.commands',\ '',\ None]"></index>
        </section>
    </section>
</document>
