<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.21.2 -->
<document source="/Users/sarinacanelake/static-clones/edx-platform/docs/references/docstrings/openedx/openedx.core.lib.celery.rst" translation_progress="{'total': 0, 'translated': 0}" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:http="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <section ids="openedx-core-lib-celery-package" names="openedx.core.lib.celery\ package">
        <title>openedx.core.lib.celery package</title>
        <section ids="submodules" names="submodules">
            <title>Submodules</title>
        </section>
        <section ids="module-openedx.core.lib.celery.routers openedx-core-lib-celery-routers-module" names="openedx.core.lib.celery.routers\ module">
            <title>openedx.core.lib.celery.routers module</title>
            <index entries="['pair',\ 'module;\ openedx.core.lib.celery.routers',\ 'module-openedx.core.lib.celery.routers',\ '',\ None]"></index>
            <paragraph>Custom routers used by both lms and cms when routing tasks to worker queues.</paragraph>
            <paragraph>For more, see <reference refuri="https://celery.readthedocs.io/en/latest/userguide/routing.html#routers">https://celery.readthedocs.io/en/latest/userguide/routing.html#routers</reference></paragraph>
            <index entries="['single',\ 'ensure_queue_env()\ (in\ module\ openedx.core.lib.celery.routers)',\ 'openedx.core.lib.celery.routers.ensure_queue_env',\ '',\ None]"></index>
            <desc classes="py function" desctype="function" domain="py" no-contents-entry="False" no-index="False" no-index-entry="False" no-typesetting="False" nocontentsentry="False" noindex="False" noindexentry="False" objtype="function">
                <desc_signature _toc_name="ensure_queue_env()" _toc_parts="openedx.core.lib.celery.routers ensure_queue_env" class="" classes="sig sig-object py" fullname="ensure_queue_env" ids="openedx.core.lib.celery.routers.ensure_queue_env" module="openedx.core.lib.celery.routers"><desc_addname classes="sig-prename descclassname" xml:space="preserve">openedx.core.lib.celery.routers.</desc_addname><desc_name classes="sig-name descname" xml:space="preserve">ensure_queue_env</desc_name><desc_parameterlist multi_line_parameter_list="False" xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n">desired_env</desc_sig_name></desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Helper method to get the desired type of queue.</paragraph>
                    <paragraph>If no such queue is defined, default routing logic is used.</paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'route_task()\ (in\ module\ openedx.core.lib.celery.routers)',\ 'openedx.core.lib.celery.routers.route_task',\ '',\ None]"></index>
            <desc classes="py function" desctype="function" domain="py" no-contents-entry="False" no-index="False" no-index-entry="False" no-typesetting="False" nocontentsentry="False" noindex="False" noindexentry="False" objtype="function">
                <desc_signature _toc_name="route_task()" _toc_parts="openedx.core.lib.celery.routers route_task" class="" classes="sig sig-object py" fullname="route_task" ids="openedx.core.lib.celery.routers.route_task" module="openedx.core.lib.celery.routers"><desc_addname classes="sig-prename descclassname" xml:space="preserve">openedx.core.lib.celery.routers.</desc_addname><desc_name classes="sig-name descname" xml:space="preserve">route_task</desc_name><desc_parameterlist multi_line_parameter_list="False" xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n">name</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n">args</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n">kwargs</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n">options</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n">task</desc_sig_name><desc_sig_operator classes="o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">None</inline></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_operator classes="o">**</desc_sig_operator><desc_sig_name classes="n">kw</desc_sig_name></desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Celery-defined method allowing for custom routing logic.</paragraph>
                    <paragraph>If None is returned from this method, default routing logic is used.</paragraph>
                </desc_content>
            </desc>
        </section>
        <section ids="module-openedx.core.lib.celery.task_utils openedx-core-lib-celery-task-utils-module" names="openedx.core.lib.celery.task_utils\ module">
            <title>openedx.core.lib.celery.task_utils module</title>
            <index entries="['pair',\ 'module;\ openedx.core.lib.celery.task_utils',\ 'module-openedx.core.lib.celery.task_utils',\ '',\ None]"></index>
            <paragraph>Middleware utilities</paragraph>
            <index entries="['single',\ 'emulate_http_request()\ (in\ module\ openedx.core.lib.celery.task_utils)',\ 'openedx.core.lib.celery.task_utils.emulate_http_request',\ '',\ None]"></index>
            <desc classes="py function" desctype="function" domain="py" no-contents-entry="False" no-index="False" no-index-entry="False" no-typesetting="False" nocontentsentry="False" noindex="False" noindexentry="False" objtype="function">
                <desc_signature _toc_name="emulate_http_request()" _toc_parts="openedx.core.lib.celery.task_utils emulate_http_request" class="" classes="sig sig-object py" fullname="emulate_http_request" ids="openedx.core.lib.celery.task_utils.emulate_http_request" module="openedx.core.lib.celery.task_utils"><desc_addname classes="sig-prename descclassname" xml:space="preserve">openedx.core.lib.celery.task_utils.</desc_addname><desc_name classes="sig-name descname" xml:space="preserve">emulate_http_request</desc_name><desc_parameterlist multi_line_parameter_list="False" xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n">site</desc_sig_name><desc_sig_operator classes="o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">None</inline></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n">user</desc_sig_name><desc_sig_operator classes="o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">None</inline></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n">middleware_classes</desc_sig_name><desc_sig_operator classes="o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">None</inline></desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Generate a fake HTTP request and run selected middleware on it.</paragraph>
                    <paragraph>This is used to enable features that assume they are running as part of an HTTP request handler. Many of these
                        features retrieve the “current” request from a thread local managed by crum. They will make a call like
                        crum.get_current_request() or something similar.</paragraph>
                    <paragraph>Since some tasks are kicked off by a management commands (which does not have an HTTP request) and then executed
                        in celery workers there is no “current HTTP request”. Instead we just populate the global state that is most
                        commonly used on request objects.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong>site</literal_strong> (<literal_emphasis>Site</literal_emphasis>) – The site that this request should emulate. Defaults to None.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong>user</literal_strong> (<reference internal="True" reftitle="openedx.core.djangoapps.django_comment_common.comment_client.user.User" refuri="openedx.core.djangoapps.django_comment_common.comment_client#openedx.core.djangoapps.django_comment_common.comment_client.user.User"><literal_emphasis>User</literal_emphasis></reference>) – The user that initiated this fake request. Defaults to None</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong>middleware_classes</literal_strong> (<literal_emphasis>list</literal_emphasis>) – A list of classes that implement Django’s middleware interface.
                                            Defaults to [CurrentRequestUserMiddleware, CurrentSiteThemeMiddleware] if None.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
        </section>
        <section ids="module-openedx.core.lib.celery module-contents" names="module\ contents">
            <title>Module contents</title>
            <index entries="['pair',\ 'module;\ openedx.core.lib.celery',\ 'module-openedx.core.lib.celery',\ '',\ None]"></index>
            <paragraph>Instantiate the singleton Celery instance that is used by either lms or cms.</paragraph>
            <paragraph>WARNING: Do not import this module directly!</paragraph>
            <paragraph>This module should only be imported by cms.celery and lms.celery, which perform
                setup in a particular order before and after Celery is instantiated. Otherwise,
                it might be possible for the Celery singleton to be created without variant-
                specific configuration.</paragraph>
            <paragraph>The module is intended as a way to have a Celery singleton shared between cms
                and lms code. Not having a guaranteed singleton means that it is possible for
                each of cms and lms to instantiate Celery, and tasks may be nondeterministically
                registered to one or the other of the instances and therefore sometimes lost
                to the running process. The root <problematic ids="id2" refid="id1">``</problematic>__init__.py``s of cms and lms both ensure that
                this module is loaded when any cms or lms code runs, effectively using the
                Python module system as a singleton loader. (This is an incremental improvement
                over older code, and there is probably a better mechanism to be had.)</paragraph>
        </section>
    </section>
</document>
