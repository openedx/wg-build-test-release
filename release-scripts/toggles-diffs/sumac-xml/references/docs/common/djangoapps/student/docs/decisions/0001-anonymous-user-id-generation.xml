<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.21.2 -->
<document source="/Users/sarinacanelake/static-clones/edx-platform/docs/references/docs/common/djangoapps/student/docs/decisions/0001-anonymous-user-id-generation.rst" translation_progress="{'total': 0, 'translated': 0}" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:http="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <section ids="anonymous-user-id-generation" names="anonymous\ user\ id\ generation">
        <title>Anonymous User Id Generation</title>
        <section ids="status" names="status">
            <title>Status</title>
            <paragraph>Accepted</paragraph>
        </section>
        <section ids="context" names="context">
            <title>Context</title>
            <paragraph>The student app provides a mechanism to generate multiple anonymous ids for a
                student.  The anonymous ID can be independent of all courses or it can be
                course specific.  To generate the anonymous ID, we currently hash the user’s
                <literal>id</literal> with the Django <literal>SECRET_KEY</literal> and a course key if provided.  The
                mapping between the anonymous ID and user <literal>id</literal> are saved in the
                <literal>AnonymousUserID</literal> table.</paragraph>
            <paragraph>As it stands, if the <literal>SECRET_KEY</literal> is rotated students would get new anonymous
                IDs starting immediately after rotation.  This can cause downstream issues
                where the IDs are output from the system.  For example, the IDs are in tracking
                data and could be used to track a user’s activity through a course for research
                purposes.</paragraph>
        </section>
        <section ids="decisions" names="decisions">
            <title>Decisions</title>
            <paragraph>Once an anonymous ID is generated for a user in a particular LearningContext
                (either a course or some other unit of learning), it will remain that way even
                if the secret used to generate the ID changes.  For any context where an
                anonymous ID does not already exist, a new ID will be generated using the
                latest <literal>SECRET_KEY</literal>.</paragraph>
        </section>
        <section ids="consequences" names="consequences">
            <title>Consequences</title>
            <paragraph>By keeping old IDs static, we increase the risk that if the salting
                data(<literal>SECRET_KEY</literal>) is leaked, then it can be used to determine and correlate
                all anonymous IDs associated with a particular user across all courses. We
                believe that this is a worth while risk to not break downstream services that
                are using anonymous IDs during the lifetime of a course.</paragraph>
        </section>
        <section ids="rejected-alternatives" names="rejected\ alternatives">
            <title>Rejected Alternatives</title>
        </section>
    </section>
    <section ids="make-anonymous-ids-randomly-generated" names="make\ anonymous\ ids\ randomly\ generated">
        <title>Make Anonymous IDs Randomly Generated</title>
        <paragraph>The function that generates anonymous IDs, has the option to not persist the
            newly generated ID. In this case, it would give a new anonymous key each time
            the function was called, instead of being consistent other than at key
            rotation. The downstream consequence of changing the SECRET_KEY that often are
            unclear so we opt not to do so at this time. In the future if we can ensure
            that the newly generated IDs are always persisted, we could more safely use
            random generation.</paragraph>
    </section>
</document>
