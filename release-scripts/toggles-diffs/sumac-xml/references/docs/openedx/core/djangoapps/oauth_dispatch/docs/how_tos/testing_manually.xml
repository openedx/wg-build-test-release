<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.21.2 -->
<document source="/Users/sarinacanelake/static-clones/edx-platform/docs/references/docs/openedx/core/djangoapps/oauth_dispatch/docs/how_tos/testing_manually.rst" translation_progress="{'total': 0, 'translated': 0}" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:http="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <section ids="manually-testing-oauth2-provider-implementation" names="manually\ testing\ oauth2\ provider\ implementation">
        <title>Manually Testing OAuth2 Provider implementation</title>
        <paragraph>This document explains how to manually test the Open edX LMS’ OAuth2 Provider
            implementation. In order to verify that it correctly implements the
            <reference name="OAuth2 standard" refuri="https://tools.ietf.org/html/rfc6749">OAuth2 standard</reference>, use a publicly available 3rd party standard OAuth2 client.
            The steps here show how to use <reference name="Google's OAuth2 Playground" refuri="https://developers.google.com/oauthplayground">Google’s OAuth2 Playground</reference> as the client for
            testing the <reference name="Authorization Code grant type" refuri="https://tools.ietf.org/html/rfc6749#section-4.1">Authorization Code grant type</reference>. However, similar steps can be used
            to test other grant types if they are substituted in the appropriate places.</paragraph>
        <enumerated_list enumtype="arabic" prefix="" suffix=".">
            <list_item>
                <paragraph>Create an OAuth2 (DOT) Application in the LMS.</paragraph>
                <enumerated_list enumtype="lowerroman" prefix="" suffix=".">
                    <list_item>
                        <paragraph>Create or decide which LMS user will be associated with the OAuth2 application. In production, the user should be a “service user” that is distinct from “LMS end-users” that login to the system.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Go to <reference refuri="http://localhost:18000/admin/oauth2_provider/application/add/">http://localhost:18000/admin/oauth2_provider/application/add/</reference> to create a new Application.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Enter a value for the “Name” field - a documentary value that uniquely describes this OAuth2 Application.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Enter a value for the “User” field - from Step 1i.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Fill in the following required fields for the Authorization Code grant type:</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>Authorization grant type: Authorization code</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Client type: Confidential</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Redirect uris: <reference refuri="https://developers.google.com/oauthplayground">https://developers.google.com/oauthplayground</reference></paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>The “Client id” and “Client secret” values are automatically randomly generated. You will later need these values in Step 4(iii) below to provide to the OAuth2 client.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Keep the “Skip authorization” checkbox deselected in order to test the interstitial approval form in the Authorization Code protocol.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Click Save.</paragraph>
                    </list_item>
                </enumerated_list>
            </list_item>
            <list_item>
                <paragraph>Optional. Make the new Application a <reference name="Restricted Application" refuri="https://github.com/openedx/edx-platform/blob/dd136b457bc8a25892445fc4362ce02838179472/openedx/core/djangoapps/oauth_dispatch/models.py#L12">Restricted Application</reference> if you are testing Restricted Application features.</paragraph>
                <enumerated_list enumtype="lowerroman" prefix="" suffix=".">
                    <list_item>
                        <paragraph>Go to <reference refuri="http://localhost:18000/admin/oauth_dispatch/restrictedapplication/add/">http://localhost:18000/admin/oauth_dispatch/restrictedapplication/add/</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Find and select the new Application you created in the dropdown.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Click Save.</paragraph>
                    </list_item>
                </enumerated_list>
            </list_item>
            <list_item>
                <paragraph>Create a publicly accessible URL to the LMS if you are testing on devstack. This step is needed to support the redirecting handshake in the Authorization Code protocol from Google’s server back to localhost.</paragraph>
                <enumerated_list enumtype="lowerroman" prefix="" suffix=".">
                    <list_item>
                        <paragraph>Install <reference name="localtunnel" refuri="https://localtunnel.github.io/www/">localtunnel</reference>:</paragraph>
                        <block_quote>
                            <paragraph>npm install -g localtunnel</paragraph>
                        </block_quote>
                    </list_item>
                    <list_item>
                        <paragraph>Run localtunnel so it assigns a unique external url that proxies requests to the LMS on localhost:</paragraph>
                        <block_quote>
                            <paragraph>lt –port 18000</paragraph>
                        </block_quote>
                    </list_item>
                    <list_item>
                        <paragraph>Copy the URL displayed in the terminal as you’ll need it in Step 4(iii) to provide to the OAuth2 client.</paragraph>
                    </list_item>
                </enumerated_list>
            </list_item>
            <list_item>
                <paragraph>Configure Google’s OAuth2 Playground</paragraph>
                <enumerated_list enumtype="lowerroman" prefix="" suffix=".">
                    <list_item>
                        <paragraph>Go to <reference refuri="https://developers.google.com/oauthplayground">https://developers.google.com/oauthplayground</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Click on the settings wheel on the right to configure the OAuth2 client.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Enter the following values:</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>OAuth flow: Server-side</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>OAuth endpoints: custom</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Authorization endpoint: &lt;URL_FROM_STEP_3(iii)&gt;/oauth2/authorize/</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Token endpoint: &lt;URL_FROM_STEP_3(iii)&gt;/oauth2/access_token/</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Access token location: Authorization header w/ Bearer prefix</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Access type: Online</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Force prompt: Consent screen</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>OAuth Client ID: &lt;VALUE_FROM_STEP_1(vi)&gt;</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>OAuth Client secret: &lt;VALUE_FROM_STEP_1(vi)&gt;</paragraph>
                            </list_item>
                        </bullet_list>
                        <image candidates="{'*': 'references/docs/openedx/core/djangoapps/oauth_dispatch/docs/images/oauth_playground_config.png'}" original_uri="../images/oauth_playground_config.png" uri="references/docs/openedx/core/djangoapps/oauth_dispatch/docs/images/oauth_playground_config.png"></image>
                    </list_item>
                    <list_item>
                        <paragraph>Click “Close”.</paragraph>
                    </list_item>
                </enumerated_list>
            </list_item>
            <list_item>
                <paragraph>Initiate OAuth2 Authorization Code flow</paragraph>
                <enumerated_list enumtype="lowerroman" prefix="" suffix=".">
                    <list_item>
                        <paragraph>Go to Step 1 on the left side of the OAuth2 Playground.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>In the “Input your own scopes” box, enter space-delimited requested scopes:</paragraph>
                        <image candidates="{'*': 'references/docs/openedx/core/djangoapps/oauth_dispatch/docs/images/oauth_playground_scopes.png'}" original_uri="../images/oauth_playground_scopes.png" uri="references/docs/openedx/core/djangoapps/oauth_dispatch/docs/images/oauth_playground_scopes.png"></image>
                    </list_item>
                    <list_item>
                        <paragraph>Click the “Authorize APIs” button to initiate the OAuth2 Authorization Code protocol.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Follow through any interstitial steps that are required. Specifically,</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>If you aren’t already logged in as an end-user on the LMS instance, you will be prompted to do so.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>If that LMS end-user hasn’t already approved the requested scopes for the OAuth2 Application, then you will be prompted to do so.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Once these interstitials are completed, the LMS will redirect back to the OAuth2 client (playground), assuming the redirect URL was correctly entered in Step 1(v).</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>If successful, the LMS would have responded back to the OAuth2 client with a temporary Authorization Code.</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                </enumerated_list>
            </list_item>
            <list_item>
                <paragraph>Exchange the Authorization Code for an Access Token.</paragraph>
                <enumerated_list enumtype="lowerroman" prefix="" suffix=".">
                    <list_item>
                        <paragraph>Go to Step 2 on the left side of the OAuth2 Playground. You will notice a random value in the “Authorization code” field, which was returned back by the LMS.</paragraph>
                        <image candidates="{'*': 'references/docs/openedx/core/djangoapps/oauth_dispatch/docs/images/oauth_playground_step2.png'}" original_uri="../images/oauth_playground_step2.png" uri="references/docs/openedx/core/djangoapps/oauth_dispatch/docs/images/oauth_playground_step2.png"></image>
                    </list_item>
                    <list_item>
                        <paragraph>Click on the “Exchange authorization code for tokens” button.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Note: the Authorization Code is temporary and short-lived.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>If successful, the LMS would have responded with a “Refresh token” and an “Access token”.</paragraph>
                        <image candidates="{'*': 'references/docs/openedx/core/djangoapps/oauth_dispatch/docs/images/oauth_playground_tokens.png'}" original_uri="../images/oauth_playground_tokens.png" uri="references/docs/openedx/core/djangoapps/oauth_dispatch/docs/images/oauth_playground_tokens.png"></image>
                    </list_item>
                </enumerated_list>
            </list_item>
            <list_item>
                <paragraph>Call an LMS API with the Access Token.</paragraph>
                <enumerated_list enumtype="lowerroman" prefix="" suffix=".">
                    <list_item>
                        <paragraph>Go to Step 3 on the left side of the OAuth2 Playground. In the Request URI field, enter any LMS URL that supports OAuth2 authentication. Remember the base URL should be the URL from Step 3(iii).</paragraph>
                        <image candidates="{'*': 'references/docs/openedx/core/djangoapps/oauth_dispatch/docs/images/oauth_playground_request_uri.png'}" original_uri="../images/oauth_playground_request_uri.png" uri="references/docs/openedx/core/djangoapps/oauth_dispatch/docs/images/oauth_playground_request_uri.png"></image>
                    </list_item>
                    <list_item>
                        <paragraph>Click on the “Send the request” button.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Verify the LMS response on the right side of the OAuth2 Playground.</paragraph>
                    </list_item>
                </enumerated_list>
            </list_item>
        </enumerated_list>
        <target ids="oauth2-standard" names="oauth2\ standard" refuri="https://tools.ietf.org/html/rfc6749"></target>
        <target ids="google-s-oauth2-playground" names="google's\ oauth2\ playground" refuri="https://developers.google.com/oauthplayground"></target>
        <target ids="authorization-code-grant-type" names="authorization\ code\ grant\ type" refuri="https://tools.ietf.org/html/rfc6749#section-4.1"></target>
        <target ids="restricted-application" names="restricted\ application" refuri="https://github.com/openedx/edx-platform/blob/dd136b457bc8a25892445fc4362ce02838179472/openedx/core/djangoapps/oauth_dispatch/models.py#L12"></target>
        <target ids="localtunnel" names="localtunnel" refuri="https://localtunnel.github.io/www/"></target>
    </section>
</document>
