<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.21.2 -->
<document source="/Users/sarinacanelake/static-clones/edx-platform/docs/references/docs/openedx/core/djangoapps/content/search/docs/decisions/0001-meilisearch.rst" translation_progress="{'total': 0, 'translated': 0}" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:http="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <section ids="studio-content-search-powered-by-meilisearch" names="studio\ content\ search\ powered\ by\ meilisearch">
        <title>Studio Content Search Powered by Meilisearch</title>
        <section ids="status" names="status">
            <title>Status</title>
            <paragraph>Draft</paragraph>
        </section>
        <section ids="context" names="context">
            <title>Context</title>
            <section ids="existing-search-functionality" names="existing\ search\ functionality">
                <title>Existing search functionality</title>
                <paragraph>The Open edX platform currently implements many different forms of search. For
                    example, users can search for course content, library content, forum posts, and
                    more. Most of the search functionality in the core platform is powered by the
                    Elasticsearch search engine (though other functionality developed by 2U, such as
                    in edx-enterprise, is powered by Algolia).</paragraph>
                <paragraph>Most uses of Elasticsearch in Open edX use
                    <reference name="edx-search" refuri="https://github.com/openedx/edx-search">edx-search</reference><target ids="edx-search" names="edx-search" refuri="https://github.com/openedx/edx-search"></target> which provides a partial
                    abstraction over Elasticsearch. The edx-search library formerly used
                    <reference name="django-haystack" refuri="https://django-haystack.readthedocs.io/">django-haystack</reference><target ids="django-haystack" names="django-haystack" refuri="https://django-haystack.readthedocs.io/"></target> as an abstraction
                    layer across search engines, but “that was ripped out after the package was
                    abandoned upstream and it became an obstacle to upgrades and efficiently
                    utilizing Elasticsearch (the abstraction layer imposed significant limits)”
                    (thanks to Jeremy Bowman for this context). Due to these changes, the current
                    edx-search API is a mix of abstractions and direct usage of the Elasticsearch
                    API, which makes it confusing and difficult to work with. In addition, each
                    usage of edx-search has been implemented fairly differently. See
                    <reference name="State of edx-search" refuri="https://openedx.atlassian.net/wiki/spaces/AC/pages/3884744738/State+of+edx-search+2023">State of edx-search</reference><target ids="state-of-edx-search" names="state\ of\ edx-search" refuri="https://openedx.atlassian.net/wiki/spaces/AC/pages/3884744738/State+of+edx-search+2023"></target>
                    for details (thanks to Andy Shultz).</paragraph>
                <paragraph>Other platform components use Elasticsearch more directly:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph><literal>course-discovery</literal> and <literal>edx-notes-api</literal> do not use <literal>edx-search</literal>, but are
                            very tied to Elasticsearch via the use of <literal>django-elasticsearch-dsl</literal> and
                            <literal>django-elasticsearch-drf</literal>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>cs_comments_service</literal> uses Elasticsearch via the official ruby gems.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="problems-with-elasticsearch" names="problems\ with\ elasticsearch">
                <title>Problems with Elasticsearch</title>
                <paragraph>At the same time, there are many problems with the current reliance on
                    Elasticsearch:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>In 2021, the license of Elasticsearch changed from Apache 2.0 to a more
                            restrictive license that prohibits providing “the products to others as a
                            managed service”. Consequently, AWS forked the search engine to create
                            OpenSearch and no longer offers Elasticsearch as a service. This is
                            problematic for many Open edX operators that use AWS and prefer to avoid
                            any third-party services.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Elasticsearch is very resource-intensive and often uses more than a gigabyte
                            of memory just for small search use cases.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Elasticsearch has poor support for multi-tenancy, which multiplies the
                            problem of resource usage for organizations with many small Open edX sites.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The existing usage of edx-search/Elasticsearch routes all search requests and
                            result processing through edxapp (the LMS) or other IDAs, increasing the
                            load on those applications.</paragraph>
                    </list_item>
                </enumerated_list>
            </section>
            <section ids="need-for-studio-search" names="need\ for\ studio\ search">
                <title>Need for Studio Search</title>
                <paragraph>At the time of this ADR, we have a goal to implement new search functionality in
                    Studio, to support various course authoring workflows.</paragraph>
            </section>
            <section ids="meilisearch" names="meilisearch">
                <title>Meilisearch</title>
                <paragraph>Meilisearch (“MAY-lee search”) is a new, promising search engine that offers a
                    compelling alternative to Elasticsearch. It is open source, feature rich, and
                    very fast and memory efficient (written in Rust, uses orders of magnitude less
                    memory than Elasticsearch for small datasets). It has a simple API with an
                    official python driver, and has official integrations with the popular
                    Instantsearch frontend library from Algolia. It has strong support for
                    multi-tenancy, and allows creating restricted API keys that incorporate a user’s
                    permissions, so that search requests can be made directly from the user to
                    Meilisearch, rather than routing them through Django. Initial testing has shown
                    it to be much more developer friendly than Elasticsearch/OpenSearch.</paragraph>
                <paragraph>At the time of writing, there are only two known concerns with Meilisearch:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>It doesn’t (yet) support High Availability via replication, although this is
                            planned and under development. It does have other features to support high
                            availability, such as very low restart time (in ms).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>It doesn’t support boolean operators in keyword search (“red AND panda”),
                            though it does of course support boolean operators in filters. This is a
                            product decision aimed at keeping the user experience simple, and is unlikely
                            to change.</paragraph>
                    </list_item>
                </enumerated_list>
            </section>
        </section>
        <section ids="decision" names="decision">
            <title>Decision</title>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>We will implement the new Studio search functionality using Meilisearch,
                        as an experiment and to evaluate it more thoroughly.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>The Studio search functionality will be disabled by default in the next
                        Open edX release (Redwood), so that Meilisearch will not be a requirement
                        for any default nor existing features. This will also allow us to evaluate it
                        before deciding to embrace it or replace it.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>We will keep the Meilisearch-specific code isolated to the
                        new <literal>content/search</literal> Django app, so it’s relatively easy to swap out later
                        if this experiment doesn’t pan out.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>We will not use <literal>edx-search</literal> for the new search functionality.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>For the experiment, we won’t use Meilisearch during tests, but we expect to
                        add that in the future if we move forward with replacing Elasticsearch completely.</paragraph>
                </list_item>
            </enumerated_list>
        </section>
        <section ids="consequences" names="consequences">
            <title>Consequences</title>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>Organizations that wish to try out the new Studio Search functionality in
                        the Redwood release will have to install and configure Meilisearch.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Building both the backend and frontend components of the Studio search
                        project will be much faster and simpler than if we used ElasticSearch,
                        edx-search, OpenSearch, django-haystack, etc.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Keyword search with boolean operators will not be supported in any of the new
                        search features.</paragraph>
                </list_item>
            </enumerated_list>
        </section>
        <section ids="alternatives-considered" names="alternatives\ considered">
            <title>Alternatives Considered</title>
            <section ids="opensearch-only" names="opensearch\ only">
                <title>OpenSearch Only</title>
                <paragraph>Moving existing search functionality to OpenSearch is a possibility, but though
                    it mostly addresses the licensing issue, it doesn’t solve the problems of
                    resource usage, API complexity, edx-search API complexity, lack of Instantsearch
                    integration, and poor multi-tenancy.</paragraph>
            </section>
            <section ids="opensearch-and-elasticsearch" names="opensearch\ and\ elasticsearch">
                <title>OpenSearch and Elasticsearch</title>
                <paragraph>When OpenSearch was originally forked from Elasticsearch, it was completely API
                    compatible, but over time they have developed along divergent paths. Regardless
                    of whether ElasticSearch and OpenSearch are actually wire-compatible, recent
                    versions of all the official ElasticSearch clients have been made to actively
                    reject connections to OpenSearch, which is why you generally won’t find client
                    libraries that work with both engines, and why there are OpenSearch forks of
                    everything on the client side as well as the server side.</paragraph>
                <paragraph>As there is no ready-to-use abstraction layer that would allow us to comfortably
                    support both, and no interest in maintaining one ourselves, this is not an
                    appealing option.</paragraph>
            </section>
            <section ids="algolia" names="algolia">
                <title>Algolia</title>
                <paragraph>Algolia is a great search engine service, but as it is a proprietary product, it
                    is not suitable as a requirement for an open source platform like Open edX.</paragraph>
            </section>
        </section>
    </section>
</document>
