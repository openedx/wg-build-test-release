<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.21.2 -->
<document source="/Users/sarinacanelake/static-clones/edx-platform/docs/references/docs/openedx/core/djangoapps/oauth_dispatch/docs/decisions/0006-enforce-scopes-in-LMS-APIs.rst" translation_progress="{'total': 0, 'translated': 0}" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:http="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <section ids="enforce-scopes-in-lms-apis" names="6.\ enforce\ scopes\ in\ lms\ apis">
        <title>6. Enforce Scopes in LMS APIs</title>
    </section>
    <section ids="status" names="status">
        <title>Status</title>
        <paragraph>Accepted</paragraph>
    </section>
    <section ids="context" names="context">
        <title>Context</title>
        <paragraph>Although external edX clients, as Restricted Applications, can use edX
            as an Identity Provider, they cannot successfully make any API calls on
            behalf of users. As explained in <reference name="0005-restricted-application-for-SSO" refuri="0005-restricted-application-for-SSO.rst">0005-restricted-application-for-SSO</reference>,
            edX prevents successful API calls since our API endpoints do not enforce
            OAuth scopes.</paragraph>
        <paragraph>For additional background information on the current implementation,
            see the <reference name="README" refuri="../README.rst">README</reference>.</paragraph>
        <target ids="restricted-application-for-sso" names="0005-restricted-application-for-sso" refuri="0005-restricted-application-for-SSO.rst"></target>
        <target ids="readme" names="readme" refuri="../README.rst"></target>
    </section>
    <section ids="decisions" names="decisions">
        <title>Decisions</title>
        <paragraph>Add support for enforcing OAuth2 scopes by making the following advancements
            simultaneously.</paragraph>
        <section ids="define-and-configure-new-oauth2-scopes-for-accessing-api-resources" names="1.\ define\ and\ configure\ new\ oauth2\ scopes\ for\ accessing\ api\ resources">
            <title>1. Define and configure new OAuth2 Scopes for accessing API resources</title>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>For now, we will start with an initial set of OAuth2 Scopes based on
                        immediate API needs. See <reference name="0007-include-organizations-in-tokens" refuri="0007-include-organizations-in-tokens.rst">0007-include-organizations-in-tokens</reference> for
                        initial examples.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>OAuth2 clients should be frugal about limiting the scopes they request
                        in order to:</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>keep the data payload small</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>keep the UX of the user approval form reasonable</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>follow principle of least privilege</paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
            </bullet_list>
        </section>
        <section ids="add-a-version-number-in-the-oauth2-token-payload" names="2.\ add\ a\ version\ number\ in\ the\ oauth2\ token\ payload">
            <title>2. Add a version number in the OAuth2 token payload</title>
            <paragraph>As a preemptive step, set a version number field (= 1) in the OAuth2 token
                payload.</paragraph>
        </section>
        <section ids="restricted-applications-receive-unexpired-jwts-signed-with-a-new-key" names="3.\ restricted\ applications\ receive\ unexpired\ jwts,\ signed\ with\ a\ new\ key">
            <title>3. Restricted Applications receive <emphasis>unexpired</emphasis> JWTs, signed with a <emphasis>new key</emphasis></title>
            <paragraph>We will no longer return expired <emphasis>JWTs as access tokens</emphasis> to Restricted
                Applications. We will sign them with a <emphasis>new key</emphasis> that is not shared with
                unprotected microservices.</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>API endpoints that are exposed by other microservices and that
                        support OAuth2 requests are vulnerable to exploitation until
                        they are also updated to enforce scopes.</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>We do not want a lock-step deployment across all of our microservices.
                                We want to enable these changes without blocking on updating all
                                microservices.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>We do not want to issue unexpired <emphasis>Bearer tokens</emphasis> to Restricted
                                Applications since they will be accepted by unprotected microservices.
                                There’s no way to retroactively inform existing microservices
                                to reject scope-limiting <emphasis>Bearer tokens</emphasis>.</paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph>On the other hand, existing unprotected microservices will reject
                        <emphasis>JWT tokens</emphasis> signed with new keys that they do not know about. We will
                        make the new keys available to a microservice only after they
                        have been updated to enforce OAuth Scopes.</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>The <reference name="edx-platform settings" refuri="https://github.com/openedx/edx-platform/blob/master/lms/envs/docs/README.rst">edx-platform settings</reference> will be updated to support a new signing
                                key. Since this transition to using a new key will happen as a staged
                                rollout, we will take this opportunity to have the new signing key be
                                an asymmetric key, rather than the current (not as secure) shared
                                symmetric key.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference name="oauth_dispatch.views.AccessTokenView.dispatch" refuri="https://github.com/openedx/edx-platform/blob/d21a09828072504bc97a2e05883c1241e3a35da9/openedx/core/djangoapps/oauth_dispatch/views.py#L100">oauth_dispatch.views.AccessTokenView.dispatch</reference> will be updated to
                                pass the new JWT key to <reference name="JwtBuilder" refuri="https://github.com/openedx/edx-platform/blob/d3d64970c36f36a96d684571ec5b48ed645618d8/openedx/core/lib/token_utils.py#L15">JwtBuilder</reference>, but only if</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>the requested token_type is <emphasis>“jwt”</emphasis> and</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>the access token is associated with a Restricted Application.</paragraph>
                                </list_item>
                            </bullet_list>
                        </list_item>
                        <list_item>
                            <paragraph><reference name="oauth_dispatch.validators" refuri="https://github.com/openedx/edx-platform/blob/master/openedx/core/djangoapps/oauth_dispatch/dot_overrides/validators.py">oauth_dispatch.validators</reference> will be updated to return <emphasis>unexpired</emphasis>
                                JWT tokens for Restricted Applications, but ONLY if:</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>the token_type in the request equals <emphasis>“jwt”</emphasis> and</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>a <reference name="feature toggle (switch)" refuri="https://openedx.atlassian.net/wiki/spaces/OpenDev/pages/40862688/Feature+Flags+and+Settings+on+edx-platform#FeatureFlagsandSettingsonedx-platform-Case1:Decouplingreleasefromdeployment">feature toggle (switch)</reference> named “oauth2.enforce_jwt_scopes” is enabled.
                                        * <strong>Note:</strong> the toggle has since been retired with the equivalent of <literal>enforce_jwt_scopes</literal> value of True.</paragraph>
                                </list_item>
                            </bullet_list>
                        </list_item>
                    </bullet_list>
                </list_item>
            </bullet_list>
            <target ids="edx-platform-settings" names="edx-platform\ settings" refuri="https://github.com/openedx/edx-platform/blob/master/lms/envs/docs/README.rst"></target>
            <target ids="jwtbuilder" names="jwtbuilder" refuri="https://github.com/openedx/edx-platform/blob/d3d64970c36f36a96d684571ec5b48ed645618d8/openedx/core/lib/token_utils.py#L15"></target>
            <target ids="oauth-dispatch-views-accesstokenview-dispatch" names="oauth_dispatch.views.accesstokenview.dispatch" refuri="https://github.com/openedx/edx-platform/blob/d21a09828072504bc97a2e05883c1241e3a35da9/openedx/core/djangoapps/oauth_dispatch/views.py#L100"></target>
            <target ids="oauth-dispatch-validators" names="oauth_dispatch.validators" refuri="https://github.com/openedx/edx-platform/blob/master/openedx/core/djangoapps/oauth_dispatch/dot_overrides/validators.py"></target>
        </section>
        <section ids="associate-available-scopes-with-applications" names="4.\ associate\ available\ scopes\ with\ applications">
            <title>4. Associate Available Scopes with Applications</title>
            <paragraph>In order to allow Open edX operators to a priori limit the
                types of access an Application can request, we will allow them
                to configure Application-specific “available scopes”.</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>Introduce a new data model that associates available scopes with
                        DOT Applications.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Introduce a new Scopes Backend that extends DOT’s <reference name="SettingsScopes" refuri="https://github.com/evonove/django-oauth-toolkit/blob/2129f32f55cda950ef220c130dc7de55bea29caf/oauth2_provider/scopes.py#L39">SettingsScopes</reference>
                        backend and overrides the implementation of <reference name="get_available_scopes" refuri="https://github.com/evonove/django-oauth-toolkit/blob/2129f32f55cda950ef220c130dc7de55bea29caf/oauth2_provider/scopes.py#L17">get_available_scopes</reference>.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>The new backend will query the new data model to retrieve
                        available scopes.</paragraph>
                </list_item>
            </bullet_list>
            <target ids="get-available-scopes" names="get_available_scopes" refuri="https://github.com/evonove/django-oauth-toolkit/blob/2129f32f55cda950ef220c130dc7de55bea29caf/oauth2_provider/scopes.py#L17"></target>
            <target ids="settingsscopes" names="settingsscopes" refuri="https://github.com/evonove/django-oauth-toolkit/blob/2129f32f55cda950ef220c130dc7de55bea29caf/oauth2_provider/scopes.py#L39"></target>
        </section>
        <section ids="associate-available-organizations-with-applications" names="5.\ associate\ available\ organizations\ with\ applications">
            <title>5. Associate Available Organizations with Applications</title>
            <paragraph>See <reference name="0007-include-organizations-in-tokens" refuri="0007-include-organizations-in-tokens.rst">0007-include-organizations-in-tokens</reference> for decisions on this.</paragraph>
        </section>
        <section ids="introduce-a-new-permission-class-to-enforce-scopes" names="6.\ introduce\ a\ new\ permission\ class\ to\ enforce\ scopes">
            <title>6. Introduce a new Permission class to enforce scopes</title>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>New Permission class</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>The new <reference name="custom Permission" refuri="http://www.django-rest-framework.org/api-guide/permissions/#custom-permissions">custom Permission</reference> class will extend DOT’s <reference name="TokenHasScope" refuri="https://github.com/evonove/django-oauth-toolkit/blob/50e4df7d97af90439d27a73c5923f2c06a4961f2/oauth2_provider/contrib/rest_framework/permissions.py#L13">TokenHasScope</reference>
                                Permission class.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>The <reference name="TokenHasScope" refuri="https://github.com/evonove/django-oauth-toolkit/blob/50e4df7d97af90439d27a73c5923f2c06a4961f2/oauth2_provider/contrib/rest_framework/permissions.py#L13">TokenHasScope</reference> permission allows API endpoints to declare the
                                scopes that they require in a <emphasis>required_scopes</emphasis> class variable.</paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph>Enforcement by the Permission class</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>The permission class will verify that the scopes in the provided JWT
                                are a proper superset of the <emphasis>required_scopes</emphasis> field set by the requested
                                view.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>For now, the permission class will skip this verification if the
                                application is not a Restricted Application or if the token_type
                                was not a JWT token.</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph><strong>Note:</strong> This will be an issue when microservices want to verify
                                        scopes. Determining whether an access token is associated with a
                                        Restricted Application is an LMS-specific capability. Given this,
                                        we may need to include a field in the token that indicates whether
                                        it was issued to a Restricted Application.</paragraph>
                                </list_item>
                            </bullet_list>
                        </list_item>
                        <list_item>
                            <paragraph>If the scopes verify, the permission class will update the request
                                object with any organization values found in the token in an attribute
                                called <emphasis>allowed_organizations</emphasis>. The view can then limit its access
                                and resources by the allowed organizations.</paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph>Using the Permission class</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>In order to have higher confidence that we don’t inadvertently miss
                                protecting any API endpoints, add the new Permission class to the
                                <reference name="REST_FRAMEWORK's DEFAULT_PERMISSION_CLASSES" refuri="http://www.django-rest-framework.org/api-guide/permissions/#setting-the-permission-policy">REST_FRAMEWORK’s DEFAULT_PERMISSION_CLASSES</reference> setting.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><strong>Note:</strong> Many of our API endpoints currently override this default
                                by overriding the <emphasis>permission_classes</emphasis> field on their own View or ViewSet.
                                So in addition to setting this default value, we will update all
                                (15 or so) places that include <reference name="JwtAuthentication" refuri="https://github.com/openedx/edx-drf-extensions/blob/4569b9bf7e54a917d4acdd545b10c058c960dd1a/edx_rest_framework_extensions/auth/jwt/authentication.py#L17">JwtAuthentication</reference> in their
                                <emphasis>authentication_classes</emphasis> field.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><strong>Note:</strong> We currently have both <reference name="function-based Django views" refuri="https://docs.djangoproject.com/en/2.0/topics/http/views/">function-based Django views</reference> and
                                class-based <reference name="Django Rest Framework (DRF)" refuri="http://www.django-rest-framework.org/">Django Rest Framework (DRF)</reference> views in the platform.</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>Authorization enforcement using Django Permission classes is
                                        supported only for DRF views. DRF does provide a <reference name="Python decorator" refuri="http://www.django-rest-framework.org/tutorial/2-requests-and-responses/#wrapping-api-views">Python decorator</reference>
                                        to add DRF support to function-based views.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>Only DRF enhanced views support JWT based authentication in our
                                        system. They do so via the DRF-based <reference name="JwtAuthentication" refuri="https://github.com/openedx/edx-drf-extensions/blob/4569b9bf7e54a917d4acdd545b10c058c960dd1a/edx_rest_framework_extensions/auth/jwt/authentication.py#L17">JwtAuthentication</reference> class.
                                        So we can <strong>safely assume</strong> that all JWT-supporting API endpoints
                                        can be protected via DRF’s Permission class.</paragraph>
                                </list_item>
                            </bullet_list>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph>Easy to disable</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>In case of an unexpected failure with this approach in production, use a
                                <reference name="feature toggle (switch)" refuri="https://openedx.atlassian.net/wiki/spaces/OpenDev/pages/40862688/Feature+Flags+and+Settings+on+edx-platform#FeatureFlagsandSettingsonedx-platform-Case1:Decouplingreleasefromdeployment">feature toggle (switch)</reference> named “oauth2.enforce_token_scopes”. When the
                                switch is disabled, the new Permission class fails verification of all
                                Restricted Application requests.</paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
            </bullet_list>
            <target ids="custom-permission" names="custom\ permission" refuri="http://www.django-rest-framework.org/api-guide/permissions/#custom-permissions"></target>
            <target ids="tokenhasscope" names="tokenhasscope" refuri="https://github.com/evonove/django-oauth-toolkit/blob/50e4df7d97af90439d27a73c5923f2c06a4961f2/oauth2_provider/contrib/rest_framework/permissions.py#L13"></target>
            <target ids="rest-framework-s-default-permission-classes" names="rest_framework's\ default_permission_classes" refuri="http://www.django-rest-framework.org/api-guide/permissions/#setting-the-permission-policy"></target>
            <target ids="function-based-django-views" names="function-based\ django\ views" refuri="https://docs.djangoproject.com/en/2.0/topics/http/views/"></target>
            <target ids="django-rest-framework-drf" names="django\ rest\ framework\ (drf)" refuri="http://www.django-rest-framework.org/"></target>
            <target ids="python-decorator" names="python\ decorator" refuri="http://www.django-rest-framework.org/tutorial/2-requests-and-responses/#wrapping-api-views"></target>
            <target ids="jwtauthentication" names="jwtauthentication" refuri="https://github.com/openedx/edx-drf-extensions/blob/4569b9bf7e54a917d4acdd545b10c058c960dd1a/edx_rest_framework_extensions/auth/jwt/authentication.py#L17"></target>
        </section>
    </section>
    <section ids="consequences" names="consequences">
        <title>Consequences</title>
        <bullet_list bullet="*">
            <list_item>
                <paragraph>Putting these changes behind a feature toggle allows us to decouple
                    release from deployment and disable these changes in the event of
                    unexpected issues.</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Minimizing the places that the feature toggle is checked (at the
                            time of returning unexpired tokens and at the time of validating
                            requests), minimizes the complexity of the code.</paragraph>
                    </list_item>
                </bullet_list>
            </list_item>
            <list_item>
                <paragraph>By associating Scopes with DOT Applications and not Restricted
                    Applications, we can eventually eliminate Restricted Applications
                    altogether. Besides, they were introduced as a temporary concept
                    until Scopes were fully rolled out.</paragraph>
            </list_item>
            <list_item>
                <paragraph>Microservices will continue to have limited scope support. We are
                    consciously deciding to not address them at this time. When we do,
                    we will also want to simplify and consolidate their OAuth-related
                    logic and code.</paragraph>
            </list_item>
        </bullet_list>
        <target ids="feature-toggle-switch" names="feature\ toggle\ (switch)" refuri="https://openedx.atlassian.net/wiki/spaces/OpenDev/pages/40862688/Feature+Flags+and+Settings+on+edx-platform#FeatureFlagsandSettingsonedx-platform-Case1:Decouplingreleasefromdeployment"></target>
        <target ids="include-organizations-in-tokens" names="0007-include-organizations-in-tokens" refuri="0007-include-organizations-in-tokens.rst"></target>
    </section>
</document>
