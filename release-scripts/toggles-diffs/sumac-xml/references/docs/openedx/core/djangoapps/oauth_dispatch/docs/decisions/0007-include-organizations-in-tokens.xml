<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.21.2 -->
<document source="/Users/sarinacanelake/static-clones/edx-platform/docs/references/docs/openedx/core/djangoapps/oauth_dispatch/docs/decisions/0007-include-organizations-in-tokens.rst" translation_progress="{'total': 0, 'translated': 0}" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:http="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <section ids="include-organizations-in-tokens" names="7.\ include\ organizations\ in\ tokens">
        <title>7. Include Organizations in Tokens</title>
    </section>
    <section ids="status" names="status">
        <title>Status</title>
        <paragraph>Accepted</paragraph>
    </section>
    <section ids="context" names="context">
        <title>Context</title>
        <section ids="status-of-organizational-access-to-edx-apis" names="status\ of\ organizational\ access\ to\ edx\ apis">
            <title>Status of Organizational Access to edX APIs</title>
            <paragraph>External edX applications would like to make server-to-server API
                calls via the Client Credentials grant type to access data. However,
                our APIs typically return data only to global staff users who
                effectively have administrative read access to the system. This
                all-or-nothing capability is unsatisfactory to meet the needs of
                edX partner organizations.</paragraph>
            <paragraph>Additionally, some organizations create their own web portals for
                their learners, using edX as an identity provider and as the underlying
                LMS. For various reasons (?), they would like to present edX data to
                their learners on their own portal. Currently, they cannot access a
                learner’s data using our APIs.</paragraph>
            <paragraph>Our API endpoints do not have more flexible capabilities since they
                do not have reliably sufficient information to limit/filter API results
                according to the organizational affiliation of the requesting application.</paragraph>
        </section>
        <section ids="organizational-types-in-the-edx-system" names="organizational\ types\ in\ the\ edx\ system">
            <title>Organizational Types in the edX System</title>
            <paragraph>Here are a few organizational relationships that exist in the edX system:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph><strong>Organization as a Content Provider</strong></paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>This is a partner organization that provides content for a course,
                                program, etc. Typically, such an organization will want to access
                                data for all learners enrolled in their courses. They may choose to
                                do so either via</paragraph>
                            <enumerated_list enumtype="loweralpha" prefix="" suffix=".">
                                <list_item>
                                    <paragraph>bulk APIs using the <emphasis>Client Credentials grant type</emphasis> (e.g., to
                                        synchronize their own data in a background process) or</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>a user-specific API on behalf of a logged-in user via the
                                        <emphasis>Authorization grant type</emphasis> and <emphasis>edX as the identity provider</emphasis>
                                        (e.g., to display user-specific data on their own portal).</paragraph>
                                </list_item>
                            </enumerated_list>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph><strong>Organization as a User Provider</strong></paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>This is an enterprise organization that registers users onto the
                                edX system, typically via an SSO-enabled portal, but with the
                                <emphasis>organization (not edX) as the identity provider</emphasis>. Such an
                                organization will also want to access data for all its users.</paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph><strong>Organization as a Credit Provider</strong></paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>This is an institution or employer that recognizes edX credentials for
                                a course, program, etc. A user would selectively grant organizations
                                permissions to access her edX records and information.</paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
            </bullet_list>
        </section>
    </section>
    <section ids="decisions" names="decisions">
        <title>Decisions</title>
        <paragraph>In order to allow DOT Applications to access data for their own organization
            without inadvertently or maliciously gaining access to data for other
            organizations, (1) applications need to be linked to their own organizations,
            (2) organization information needs to be cryptographically bound with
            issued tokens and the (3) the authorization approval form needs to present the
            organization information to the granting end-user.</paragraph>
        <section ids="associate-available-organizations-with-dot-applications" names="1.\ associate\ available\ organizations\ with\ dot\ applications">
            <title>1. Associate Available Organizations with DOT Applications</title>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>Create a configurable Application-specific “available organizations”
                        setting, which is akin to Application-specific “available scopes”
                        (as described in <reference name="0006-enforce-scopes-in-LMS-APIs" refuri="0006-enforce-scopes-in-LMS-APIs.rst">0006-enforce-scopes-in-LMS-APIs</reference>).</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Introduce a new data model that associates available organizations
                        with DOT Applications.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>The new data model will have a Foreign Key to the <reference name="Organization" refuri="https://github.com/openedx/edx-organizations/blob/fa137881be9b7d330062bc32655a00c68635cfed/organizations/models.py#L14">Organization</reference> table.
                        It will essentially be a many-to-many relationship between Organizations
                        and DOT Applications.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>The new data model will also have a column for specifying organization
                        type: <emphasis>content_provider</emphasis>, <emphasis>user_provider</emphasis>, <emphasis>credit_provider</emphasis>, etc.
                        Initially, we will only use <emphasis>content_provider</emphasis>.</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="organization-and-users-as-filters-in-oauth-tokens" names="2.\ organization\ and\ users\ as\ filters\ in\ oauth\ tokens">
            <title>2. Organization and Users as Filters in OAuth Tokens</title>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>The organization associated with the Application will be specified
                        in a new <emphasis>filters</emphasis> field in the JSON Web Token (JWT).</paragraph>
                </list_item>
                <list_item>
                    <paragraph>The value of the <emphasis>filters</emphasis> field will include what <emphasis>type</emphasis> of organization
                        it is (per`Organizational Types in the edX System`_).  For example:</paragraph>
                    <block_quote>
                        <paragraph>“content_org:Microsoft”</paragraph>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>For a token created on behalf of a user (<emphasis>not</emphasis> created via a
                        <emphasis>Client Credentials grant type</emphasis>), the token
                        is further restricted specifically for the granting user.  And so, a
                        “user” filter with the value “me” would be added for this grant type.
                        For example:</paragraph>
                    <block_quote>
                        <paragraph>“user:me”</paragraph>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph><reference name="JwtBuilder" refuri="https://github.com/openedx/edx-platform/blob/d3d64970c36f36a96d684571ec5b48ed645618d8/openedx/core/lib/token_utils.py#L15">JwtBuilder</reference>’s <emphasis>build_token</emphasis> functionality will be extended to include
                        the filters in the token’s payload. This payload is
                        cryptographically signed and so binds and limits the scopes in the
                        token to the filters.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Since filters are inside the token, any relying party
                        that receives the token (any microservice) will be able to
                        enforce scopes as limited by the filters. API endpoints will limit the
                        values returned in their payloads by the specified filters.</paragraph>
                </list_item>
            </bullet_list>
            <target ids="enforce-scopes-in-lms-apis" names="0006-enforce-scopes-in-lms-apis" refuri="0006-enforce-scopes-in-LMS-APIs.rst"></target>
            <target ids="organization" names="organization" refuri="https://github.com/openedx/edx-organizations/blob/fa137881be9b7d330062bc32655a00c68635cfed/organizations/models.py#L14"></target>
            <target ids="jwtbuilder" names="jwtbuilder" refuri="https://github.com/openedx/edx-platform/blob/d3d64970c36f36a96d684571ec5b48ed645618d8/openedx/core/lib/token_utils.py#L15"></target>
        </section>
        <section ids="organization-information-in-authorization-approval-form" names="3.\ organization\ information\ in\ authorization\ approval\ form">
            <title>3. Organization Information in Authorization Approval Form</title>
            <paragraph>When the interstitial authorization approval form is presented to the
                user for granting access to a DOT Application, if the Application is
                associated with an Organization, the Organization value(s) should be
                presented to the user. This makes it clear to the user that the
                granted access is limited to the Organization’s affiliations.</paragraph>
        </section>
    </section>
    <section ids="token-examples" names="token\ examples">
        <title>Token Examples</title>
        <section ids="client-credentials-server-to-server-grant-type" names="client\ credentials\ (server-to-server)\ grant\ type">
            <title>Client Credentials (server-to-server) grant type</title>
            <paragraph>When a trusted application makes server-to-server calls, the application’s
                service user info is included in the JWT and the <emphasis>filters</emphasis> field
                includes the organization identifier and type associated with the application.</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">{
  "scopes": ["grades:read", "enrollments:read"],
  "filters":  ["content_org:Microsoft"],
  "version": "1.0",
  "preferred_username": "microsoft_service_user",
  ...
}</literal_block>
        </section>
        <section ids="authorization-code-and-password-based-on-behalf-of-user-grant-types" names="authorization\ code\ and\ password-based\ (on\ behalf\ of\ user)\ grant\ types">
            <title>Authorization Code and Password-based (on behalf of user) grant types</title>
            <paragraph>When a user-approved application or a trusted mobile app makes calls on behalf
                of the approving user, the user’s info is included in the token along with a
                filter “me” in the <emphasis>filters</emphasis> field.</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">{
  "scopes": ["grades:read", "enrollments:read"],
  "filters":  ["content_org:Microsoft", "user:me"],
  "version": "1.0",
  "preferred_username": "ajay_mehta",
  ...
}</literal_block>
        </section>
    </section>
    <section ids="consequences" names="consequences">
        <title>Consequences</title>
        <bullet_list bullet="*">
            <list_item>
                <paragraph>By associating organizations with DOT Applications and not Restricted
                    Applications, we can eventually eliminate Restricted Applications
                    altogether.</paragraph>
            </list_item>
            <list_item>
                <paragraph>By including the organization value and its type in the token, any relying party
                    that receives the token (including a microservice) will be able to
                    enforce the scopes as limited to the organization.</paragraph>
            </list_item>
            <list_item>
                <paragraph>Having a separate field for <emphasis>filters</emphasis> introduces a clear boundary for
                    separation of concerns of what is enforced at each layer:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph><strong>API endpoint</strong> declares the <emphasis>required scopes</emphasis>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The base <strong>Django Permission</strong> class enforces <emphasis>required scopes</emphasis>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><strong>API gateway</strong> (in the future) may additionally enforce <emphasis>required scopes</emphasis>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><strong>API endpoint</strong> enforces the <emphasis>required filters</emphasis>.</paragraph>
                    </list_item>
                </bullet_list>
            </list_item>
            <list_item>
                <paragraph>When a new filter type is introduced in the future, we will have to
                    make sure there are no security issues introduced where old endpoints
                    that are not aware of the new filter do not enforce it.  Possible
                    ways of doing so are:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Endpoints that are highly security sensitive should reject any
                            token that includes an unrecognized filter.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Multi-phase rollout with a major version update of tokens once all
                            microservices and relevant endpoints have updated to recognize the new
                            filter. Tokens with the new filter would be issued only after all relevant
                            endpoints have been updated.</paragraph>
                    </list_item>
                </bullet_list>
            </list_item>
            <list_item>
                <paragraph>Alternatively, we could have embedded the filter-type within the <emphasis>scopes</emphasis>
                    field of the token. This would support a more secure path forward since
                    old endpoints would automatically reject new filter-types in scopes that
                    they don’t recognize. For example:</paragraph>
                <block_quote>
                    <paragraph>“grades:read:content_org”</paragraph>
                </block_quote>
                <paragraph>Additionally, this alternative would allow tokens to specify different filters
                    for different scopes.</paragraph>
                <paragraph>However, this alternative was rejected since it added unnecessary confusion
                    in understanding and parsing scope values. Additionally keeping filters
                    independent allows them to evolve and grow (more complex) over time without
                    trying to coerce their values within scope expressions.</paragraph>
            </list_item>
        </bullet_list>
    </section>
    <section ids="references" names="references">
        <title>References</title>
        <bullet_list bullet="*">
            <list_item>
                <paragraph>Examples of Scopes in other web systems</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph><reference refuri="https://developer.github.com/apps/building-oauth-apps/scopes-for-oauth-apps/">https://developer.github.com/apps/building-oauth-apps/scopes-for-oauth-apps/</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference refuri="https://developers.google.com/identity/protocols/googlescopes">https://developers.google.com/identity/protocols/googlescopes</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference refuri="https://api.slack.com/scopes">https://api.slack.com/scopes</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference refuri="https://developer.spotify.com/web-api/using-scopes/">https://developer.spotify.com/web-api/using-scopes/</reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference refuri="https://developer.atlassian.com/server/hipchat/hipchat-rest-api-scopes/">https://developer.atlassian.com/server/hipchat/hipchat-rest-api-scopes/</reference></paragraph>
                    </list_item>
                </bullet_list>
            </list_item>
        </bullet_list>
    </section>
</document>
