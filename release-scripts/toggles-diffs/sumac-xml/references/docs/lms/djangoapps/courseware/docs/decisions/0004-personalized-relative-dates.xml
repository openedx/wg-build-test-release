<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.21.2 -->
<document source="/Users/sarinacanelake/static-clones/edx-platform/docs/references/docs/lms/djangoapps/courseware/docs/decisions/0004-personalized-relative-dates.rst" translation_progress="{'total': 0, 'translated': 0}" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:http="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <section ids="personalized-relative-dates-in-courseware" names="0004.\ personalized/relative\ dates\ in\ courseware">
        <title>0004. Personalized/Relative Dates in Courseware</title>
        <section ids="context" names="context">
            <title>Context</title>
            <paragraph>Self-paced courses are, based on the experience of users on edx.org,
                less engaging and less likely to be completed, than instructor-paced courses.
                Research shows that learners are better able to complete a course of study
                when that course gives them multiple incremental deadlines along the way,
                rather than one single deadline at the end of the course. Unfortunately,
                self-paced courses are currently only able to offer the latter experience.</paragraph>
            <paragraph><literal>edx-when</literal> is a library currently used by <literal>edx-platform</literal> to provide a
                read-optimized view of the dates associated with course content. It is updated
                when a course is published, and stores dates in a dedicated table in the
                relational database.</paragraph>
        </section>
        <section ids="definitions" names="definitions">
            <title>Definitions</title>
            <definition_list>
                <definition_list_item>
                    <term>Absolute date:</term>
                    <definition>
                        <paragraph>A date and time, represented in python as <title_reference>datetime.datetime</title_reference>.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term>Relative date:</term>
                    <definition>
                        <paragraph>A date and time offset, represented in python as <title_reference>datetime.timedelta</title_reference>.
                            To convert to an Absolute date, the offset is added to a students Content
                            Availability Date.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term>Content Availability Date:</term>
                    <definition>
                        <paragraph>The students enrollment date, or the course start date, whichever is later.</paragraph>
                    </definition>
                </definition_list_item>
            </definition_list>
        </section>
        <section ids="decision" names="decision">
            <title>Decision</title>
            <paragraph>In order to support incremental deadlines in self-paced courses, we want
                to extend edx-platform with the following capabilities:</paragraph>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>Extend the api provided by <literal>edx-when</literal> used in the LMS to so that
                        the LMS can ask for dates for students (supplying their <literal>Schedule</literal>), and
                        <literal>edx-when</literal> will return an absolute date (even if the date defined by
                        Studio is relative).</paragraph>
                </list_item>
                <list_item>
                    <paragraph>When a self-paced course is published, add relative due dates to it,
                        evenly spaced across the expected duration of the course, unless the
                        course already has relative dates attached to content.</paragraph>
                    <enumerated_list enumtype="loweralpha" prefix="" suffix=".">
                        <list_item>
                            <paragraph>These dates should be pushed into <literal>edx-when</literal>
                                by Studio. We will move the existing <literal>edx-when</literal> course-publish signal
                                handler out into Studio, and have it use exposed <literal>edx-when</literal> APIs to
                                write in absolute or relative dates.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>While there are no current plans to allow Studio authors to author
                                relative dates, by making the evenly-spacing only occur if there
                                is no existing relative dates on the course, we leave ourselves the
                                ability to add future studio authoring without changing <literal>edx-when</literal>.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Adding the relative dates on course-publish, and storing them in <literal>edx-when</literal>,
                                rather than inferring them at run-time while reading from <literal>edx-when</literal>
                                means that we have the course structure in-hand (from the course
                                publish), and that <literal>edx-when</literal> will remain a full listing of all dates
                                in the course. If, instead, the LMS inferred relative dates when they
                                weren’t set in <literal>edx-when</literal>, then new date-based functionality in the
                                future would need to either read through a specific api that would
                                inject the programmatic dates, or would have to infer its own dates.</paragraph>
                        </list_item>
                    </enumerated_list>
                </list_item>
                <list_item>
                    <paragraph>No new fields would be added to XBlocks at this time to represent relative
                        dates. There is no studio authoring component for this feature, and the LMS
                        Xblock runtime would contextualize relative dates for a specific student
                        when supplying them to XBlock fields.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Update the documentation in <literal>edx-when</literal> to capture our current
                        understanding of its responsibilities. To wit, <literal>edx-when</literal> exists to give
                        the LMS a single place to ask “What does this student have coming up,
                        across one or many courses?”, and get a fast, efficient answer. To that
                        end, the <literal>schedules</literal> django app should be moved into <literal>edx-when</literal>, and
                        it will handle any future features related to the ability to scale pacing
                        in self-paced courses faster or slower. <literal>edx-when</literal> is thus both a
                        performance optimization(because it is optimized for reading), and the
                        single dedicated owner of a particular user’s schedule of course content.</paragraph>
                    <paragraph>However, it does not include information about course-level administrative
                        dates, such as the upgrade deadline, so that will need to be disentangled
                        from the Schedule model (or we’ll need to expand <literal>edx-when</literal> with
                        additional notions of date semantics).</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>edx-when</literal>, and the <literal>schedules</literal> app, should keep history, so that we
                        can determine at analysis time what their schedule was when they answered
                        a problem. Using a simple history table should be sufficient to also
                        support showing a user the history of changes to their own schedule.</paragraph>
                </list_item>
            </enumerated_list>
        </section>
        <section ids="status" names="status">
            <title>Status</title>
            <paragraph>Proposed</paragraph>
        </section>
        <section ids="consequences" names="consequences">
            <title>Consequences</title>
            <paragraph>Once implemented, self-paced courses in the LMS would begin to have
                due dates for course content that are consistent between users, but that
                are personalized based on when a user started a course. We would be open
                to exploring future functionality for allowing users to adjust their schedule
                by resetting their effective course start time, or speeding up or slowing
                down their pacing.</paragraph>
        </section>
        <section ids="rejected-alternatives" names="rejected\ alternatives">
            <title>Rejected Alternatives</title>
            <section ids="expand-capabilities-of-xblock-datefield" names="expand\ capabilities\ of\ xblock\ datefield">
                <title>Expand Capabilities of XBlock DateField</title>
                <paragraph>It’s tempting to allow the XBlock DateField to support relative dates as well
                    as absolute dates. However, that would cause OLX backwards incompatibility
                    when the relative dates were exported into the same field as the existing
                    absolute dates.</paragraph>
            </section>
            <section ids="offset-from-previous-content" names="offset\ from\ previous\ content">
                <title>Offset From Previous Content</title>
                <paragraph>Rather than considering date offsets to be relative to the start of the users
                    schedule, maybe they should be relative to the previous item of content.
                    That way, when you reset a schedule (or change a users pacing), you can just
                    modify future content.</paragraph>
                <paragraph>The difficulties with this proposal are:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>In order to find the actual absolute date of a piece of content, you need
                            to access all of the content before that item in the course, and then
                            sum up all of their offsets. This makes it harder to easily query all
                            upcoming due-dates over multiple courses.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>When a user resets their schedule, they probably want to adjust previous
                            dates as well, so that they can go back and answer problems that they
                            missed. If that’s the case, then adjusting the start date based on the
                            newly requested extension will make it easier update old and new content
                            consistently.</paragraph>
                    </list_item>
                </enumerated_list>
            </section>
        </section>
    </section>
</document>
