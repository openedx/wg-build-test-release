<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.21.2 -->
<document source="/Users/sarinacanelake/static-clones/edx-platform/docs/references/docs/lms/djangoapps/courseware/docs/decisions/0001-xblock-content-overrides.rst" translation_progress="{'total': 0, 'translated': 0}" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:http="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <section ids="xblock-content-replacement-for-access-control" names="1.\ xblock\ content\ replacement\ for\ access\ control">
        <title>1. XBlock Content Replacement for Access Control</title>
        <section ids="status" names="status">
            <title>Status</title>
            <paragraph>Accepted</paragraph>
        </section>
        <section ids="context" names="context">
            <title>Context</title>
            <paragraph>Content Type Gating requires that users be prevented from viewing
                or interacting with an XBlock, and instead being shown a message
                suggesting how to gain access. XBlocks are rendered in a tree,
                and the rendering is managed by the XBlocks themselves. XBlocks
                expect to be able to retrieve their own children, inspect attributes
                of those children, and then render those children w/ a method call.</paragraph>
            <paragraph>XBlock access control removes a child from the render tree, which
                makes it difficult to know where to generate the replacement message
                during rendering. Substituting one xblock for another of a different
                type at runtime has historically problematic, because the different
                XBlock types don’t behave the same way. Replacing an XBlock with a
                non-XBlock type is difficult for the same reason.</paragraph>
        </section>
        <section ids="decision" names="decision">
            <title>Decision</title>
            <paragraph>We will continue to manage access-control decisions using <literal>has_access</literal>.
                When access is denied, we will generate a custom <literal>Fragment</literal> containing
                the error message, and attach it to the <literal>AccessResponse</literal> object.</paragraph>
            <paragraph>While rendering the XBlock hierarchy, we will continue to check access
                as is currently implemented. If the <literal>AccessResponse</literal> returned has a
                user-facing error fragment (stored in <literal>AccessResponse.user_fragment</literal>),
                then we will act as though the XBlock was not access restricted, and
                allow it to be loaded.</paragraph>
            <paragraph>In order to actually restrict access to the XBlock, we will add an
                <literal>xblock_wrapper</literal> that will again check whether a user has permission
                to view the xblock. If the user doesn’t, and the <literal>AccessResponse</literal>
                has a <literal>user_fragment</literal> set, then that content will be substituted
                for the XBlock’s originally rendered <literal>Fragment</literal>.</paragraph>
        </section>
        <section ids="consequences" names="consequences">
            <title>Consequences</title>
            <paragraph>XBlocks can be access-limited with custom user-facing messaging.
                There is a performance cost to those messages, because the XBlock
                that is being access-limited will still render its own <literal>Fragment</literal>.</paragraph>
        </section>
    </section>
</document>
