<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.21.2 -->
<document source="/Users/sarinacanelake/static-clones/edx-platform/docs/references/docs/lms/djangoapps/courseware/docs/decisions/0002-permissions-via-django-rules.rst" translation_progress="{'total': 0, 'translated': 0}" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:http="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <section ids="use-django-rules-for-permissions-and-tracks" names="0002.\ use\ django-rules\ for\ permissions\ and\ tracks">
        <title>0002. Use <reference name="django-rules" refuri="https://github.com/dfunckt/django-rules">django-rules</reference> for Permissions and Tracks</title>
        <section ids="context" names="context">
            <title>Context</title>
            <paragraph><reference name="OEP-9" refuri="https://open-edx-proposals.readthedocs.io/en/latest/oep-0009-bp-permissions.html">OEP-9</reference> mandates the use of <reference name="django-rules" refuri="https://github.com/dfunckt/django-rules">django-rules</reference> to provide a flexible
                implementation of permissions in edX applications. <reference name="edx-platform" refuri="https://github.com/openedx/edx-platform">edx-platform</reference>
                predates that OEP, and uses a home-grown API for checking permissions.
                That API, <reference name="has_access" refuri="https://github.com/openedx/edx-platform/blob/master/lms/djangoapps/courseware/access.py#L103">has_access</reference>, uses predominately role-based checks and
                implicit permissions, rather than explicitly named permissions. That is,
                <reference name="has_access" refuri="https://github.com/openedx/edx-platform/blob/master/lms/djangoapps/courseware/access.py#L103">has_access</reference> is called to check if a user has a role in a course,
                and then a users ability to perform an action is inferred from
                that role. As a result, it is difficult to separate the roles in
                the edx-platform system from the permissions that are granted to those
                roles (or to grant existing permissions to new roles).</paragraph>
            <paragraph>Similarly, most permissions relating to student course access are
                based on the users enrollment in a particular track, and are checked
                by examining the <reference name="CourseMode" refuri="https://github.com/openedx/edx-platform/blob/master/common/djangoapps/course_modes/models.py#L37">CourseMode</reference> of that enrollment. As a result, adding
                new <literal>CourseModes</literal> with similar but not identical permissions requires
                numerous distributed code changes.</paragraph>
            <target ids="oep-9" names="oep-9" refuri="https://open-edx-proposals.readthedocs.io/en/latest/oep-0009-bp-permissions.html"></target>
            <target ids="coursemode" names="coursemode" refuri="https://github.com/openedx/edx-platform/blob/master/common/djangoapps/course_modes/models.py#L37"></target>
            <target ids="edx-platform" names="edx-platform" refuri="https://github.com/openedx/edx-platform"></target>
        </section>
        <section ids="decision" names="decision">
            <title>Decision</title>
            <paragraph>We will update all uses of <reference name="has_access" refuri="https://github.com/openedx/edx-platform/blob/master/lms/djangoapps/courseware/access.py#L103">has_access</reference>, and all <reference name="CourseMode" refuri="https://github.com/openedx/edx-platform/blob/master/common/djangoapps/course_modes/models.py#L37">CourseMode</reference> membership
                checks, to use <reference name="django-rules" refuri="https://github.com/dfunckt/django-rules">django-rules</reference> and named permissions.</paragraph>
            <section ids="plan-of-action" names="plan\ of\ action">
                <title>Plan of Action</title>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>Write a subclass of <literal>Predicate</literal> to allow for non-booleans to be returned during
                            evaluation.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Convert built-in predicates to non-boolean predicates in edx-platform.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>For each caller of <literal>has_access</literal>:</paragraph>
                        <enumerated_list enumtype="arabic" prefix="" suffix=".">
                            <list_item>
                                <paragraph>Convert the caller to use <literal>user.has_perm</literal> instead.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Implement the new permission created in 1. by referencing to the previous
                                    <literal>has_access</literal> call.</paragraph>
                            </list_item>
                        </enumerated_list>
                    </list_item>
                    <list_item>
                        <paragraph>Refactor contents of <literal>has_access</literal> out into their own predicates that can
                            be used to implement specific permissions.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>For each place that checks if a user is enrolled in a specific track:</paragraph>
                        <enumerated_list enumtype="arabic" prefix="" suffix=".">
                            <list_item>
                                <paragraph>Convert the that check to use <literal>user.has_perm</literal> for a named permission</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Implement that permission by checking</paragraph>
                            </list_item>
                        </enumerated_list>
                    </list_item>
                </enumerated_list>
            </section>
            <section ids="details" names="details">
                <title>Details</title>
                <section ids="subclass-predicate" names="subclass\ predicate">
                    <title>Subclass <literal>Predicate</literal></title>
                    <paragraph>The <reference name="Predicate" refuri="https://github.com/dfunckt/django-rules/blob/master/rules/predicates.py#L47">Predicate</reference> class provided by <reference name="django-rules" refuri="https://github.com/dfunckt/django-rules">django-rules</reference> takes some
                        pains to make sure that the results of predicates are explicitly booleans,
                        rather than just being objects that are truthy. In order to return objects
                        like <reference name="AccessResponse" refuri="https://github.com/openedx/edx-platform/blob/master/lms/djangoapps/courseware/access_response.py#L10">AccessResponse</reference>, which may encode additional data about the
                        particular predicate that failed, we need to modify <reference name="Predicate" refuri="https://github.com/dfunckt/django-rules/blob/master/rules/predicates.py#L47">Predicate</reference>.</paragraph>
                    <paragraph>In particular, we will need to remove two instances of explicit conversion
                        to boolean:</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph><reference refuri="https://github.com/dfunckt/django-rules/blob/master/rules/predicates.py#L154">https://github.com/dfunckt/django-rules/blob/master/rules/predicates.py#L154</reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference refuri="https://github.com/dfunckt/django-rules/blob/master/rules/predicates.py#L214">https://github.com/dfunckt/django-rules/blob/master/rules/predicates.py#L214</reference></paragraph>
                        </list_item>
                    </bullet_list>
                    <paragraph>There may be other spots that need adjustment as well, to make sure
                        that we always return the non-boolean predicate results through, given
                        the option. We also need a policy for what happens if multiple
                        non-boolean predicates are being combined with <literal>&amp;</literal> and <literal>|</literal>. Until
                        proven otherwise, my recommendation is that the first such predicate is
                        returned. We could in the future add functionality to return a list of all
                        failing predicates.</paragraph>
                    <paragraph>Additionally, <reference refuri="https://github.com/dfunckt/django-rules/blob/master/rules/predicates.py#L183">https://github.com/dfunckt/django-rules/blob/master/rules/predicates.py#L183</reference>
                        should convert <literal>other</literal> to a non-boolean predicate if it isn’t already.
                        Note, though, that this won’t covert a boolean-only predicate to a
                        non-boolean predicate if the boolean-only predicate is first in the chain.</paragraph>
                    <paragraph>Finally, we need to make sure that <literal>__invert__</literal> doesn’t lose error
                        messages (<reference refuri="https://github.com/dfunckt/django-rules/blob/master/rules/predicates.py#L173">https://github.com/dfunckt/django-rules/blob/master/rules/predicates.py#L173</reference>)</paragraph>
                    <target ids="django-rules" names="django-rules" refuri="https://github.com/dfunckt/django-rules"></target>
                    <target ids="accessresponse" names="accessresponse" refuri="https://github.com/openedx/edx-platform/blob/master/lms/djangoapps/courseware/access_response.py#L10"></target>
                    <target ids="predicate" names="predicate" refuri="https://github.com/dfunckt/django-rules/blob/master/rules/predicates.py#L47"></target>
                </section>
                <section ids="convert-built-in-predicates-to-non-boolean-predicates-in-edx-platform" names="convert\ built-in\ predicates\ to\ non-boolean\ predicates\ in\ edx-platform">
                    <title>Convert built-in predicates to non-boolean predicates in edx-platform</title>
                    <paragraph><reference name="django-rules" refuri="https://github.com/dfunckt/django-rules">django-rules</reference> includes a number of built-in predicates related to standard
                        django permissions. We should make it easy to convert an existing predicate
                        into a non-boolean response predicate, and provide convenience versions of
                        the built-in predicates in edx-platform that have already been converted.
                        However, we could consider doing this work on-demand as we need the built-ins,
                        rather than up front. The risk is that it would be easy for future developers
                        to miss the existence of the edx-platform versions if they aren’t commonly
                        in use already in edx-platform.</paragraph>
                </section>
                <section ids="convert-callers-of-has-access-to-use-user-has-perm" names="convert\ callers\ of\ has_access\ to\ use\ user.has_perm">
                    <title>Convert callers of <reference name="has_access" refuri="https://github.com/openedx/edx-platform/blob/master/lms/djangoapps/courseware/access.py#L103">has_access</reference> to use <reference name="user.has_perm" refuri="https://docs.djangoproject.com/en/2.1/ref/contrib/auth/#django.contrib.auth.models.User.has_perm">user.has_perm</reference></title>
                    <paragraph>Currently, the LMS uses <reference name="has_access" refuri="https://github.com/openedx/edx-platform/blob/master/lms/djangoapps/courseware/access.py#L103">has_access</reference> to check if a given user has a particular
                        role on a particular object (usually a course or an xblock). From that, it
                        assumes various permissions. The primary goal of this project is to convert
                        those implicit permissions into explicit named permissions that are tied
                        to roles by the use of various predicates.</paragraph>
                    <paragraph>To bootstrap this process, we can wrap <reference name="has_access" refuri="https://github.com/openedx/edx-platform/blob/master/lms/djangoapps/courseware/access.py#L103">has_access</reference> in named permissions by:</paragraph>
                    <enumerated_list enumtype="arabic" prefix="" suffix=".">
                        <list_item>
                            <paragraph>Convert each caller of <reference name="has_access" refuri="https://github.com/openedx/edx-platform/blob/master/lms/djangoapps/courseware/access.py#L103">has_access</reference> to use <reference name="user.has_perm" refuri="https://docs.djangoproject.com/en/2.1/ref/contrib/auth/#django.contrib.auth.models.User.has_perm">user.has_perm</reference> instead.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Implement the new permission created in 1. by referencing to the previous
                                <reference name="has_access" refuri="https://github.com/openedx/edx-platform/blob/master/lms/djangoapps/courseware/access.py#L103">has_access</reference> call.</paragraph>
                        </list_item>
                    </enumerated_list>
                    <paragraph>This work can be done incrementally, one call to <reference name="has_access" refuri="https://github.com/openedx/edx-platform/blob/master/lms/djangoapps/courseware/access.py#L103">has_access</reference> at a time,
                        and can be parallelized. However, at present, there are ~150 calls to
                        <reference name="has_access" refuri="https://github.com/openedx/edx-platform/blob/master/lms/djangoapps/courseware/access.py#L103">has_access</reference> in edx-platform, so this is not an insignificant amount of
                        work.</paragraph>
                    <target ids="has-access" names="has_access" refuri="https://github.com/openedx/edx-platform/blob/master/lms/djangoapps/courseware/access.py#L103"></target>
                    <target ids="user-has-perm" names="user.has_perm" refuri="https://docs.djangoproject.com/en/2.1/ref/contrib/auth/#django.contrib.auth.models.User.has_perm"></target>
                </section>
                <section ids="refactor-contents-of-has-access" names="refactor\ contents\ of\ has_access">
                    <title>Refactor contents of <literal>has_access</literal></title>
                    <paragraph>As implemented, <reference name="has_access" refuri="https://github.com/openedx/edx-platform/blob/master/lms/djangoapps/courseware/access.py#L103">has_access</reference> has many subclauses to handle the various
                        roles and object types. With <reference name="django-rules" refuri="https://github.com/dfunckt/django-rules">django-rules</reference>, those clauses could be converted
                        to smaller individual predicates, either divided by roles, object types,
                        or both. These predicates would then be simpler to test and to use in
                        determining future permissions.</paragraph>
                </section>
                <section ids="convert-track-membership-tests-to-permissions" names="convert\ track\ membership\ tests\ to\ permissions">
                    <title>Convert track membership tests to permissions</title>
                    <paragraph>Future work in the same vein would be to convert current usage of track
                        membership into <reference name="user.has_perm" refuri="https://docs.djangoproject.com/en/2.1/ref/contrib/auth/#django.contrib.auth.models.User.has_perm">user.has_perm</reference> checks. This would allow disaggregation
                        of edx-platform features and would make it easier to add new tracks
                        with variations of those features.</paragraph>
                </section>
            </section>
            <section ids="offramps" names="offramps">
                <title>Offramps</title>
                <paragraph>The primary offramp would be suspending the project after converting all
                    callers of <reference name="has_access" refuri="https://github.com/openedx/edx-platform/blob/master/lms/djangoapps/courseware/access.py#L103">has_access</reference> to use <reference name="user.has_perm" refuri="https://docs.djangoproject.com/en/2.1/ref/contrib/auth/#django.contrib.auth.models.User.has_perm">user.has_perm</reference>. If we have more time,
                    then refactoring <reference name="has_access" refuri="https://github.com/openedx/edx-platform/blob/master/lms/djangoapps/courseware/access.py#L103">has_access</reference> would be a definite positive, but not
                    required. If we are forced to cut scope, then only partially completing
                    the conversion of <reference name="has_access" refuri="https://github.com/openedx/edx-platform/blob/master/lms/djangoapps/courseware/access.py#L103">has_access</reference> would be an improvement, perhaps with
                    the addition of deprecation warnings for direct callers to <reference name="has_access" refuri="https://github.com/openedx/edx-platform/blob/master/lms/djangoapps/courseware/access.py#L103">has_access</reference>
                    so that we can track the remaining work with INCR tickets.</paragraph>
            </section>
        </section>
        <section ids="status" names="status">
            <title>Status</title>
            <paragraph>Accepted</paragraph>
        </section>
        <section ids="consequences" names="consequences">
            <title>Consequences</title>
            <paragraph>When the conversion of <reference name="has_access" refuri="https://github.com/openedx/edx-platform/blob/master/lms/djangoapps/courseware/access.py#L103">has_access</reference> has been completed, it will be easier
                to add additional conditions to various permissions checks on specific objects.
                It will also allow those conditions (predicates) to be written in
                a location that is central to the app they are responsible for, rather
                than requiring that they be added to <reference name="access.py" refuri="https://github.com/openedx/edx-platform/blob/master/lms/djangoapps/courseware/access.py">access.py</reference>.</paragraph>
            <target ids="access-py" names="access.py" refuri="https://github.com/openedx/edx-platform/blob/master/lms/djangoapps/courseware/access.py"></target>
            <paragraph>When the conversion of <reference name="CourseMode" refuri="https://github.com/openedx/edx-platform/blob/master/common/djangoapps/course_modes/models.py#L37">CourseMode</reference> membership checks has been completed,
                it will be easier to add new <reference name="CourseMode" refuri="https://github.com/openedx/edx-platform/blob/master/common/djangoapps/course_modes/models.py#L37">CourseMode</reference> types with similar permissions
                schema to the codebase. It will also open the way towards making <reference name="CourseMode" refuri="https://github.com/openedx/edx-platform/blob/master/common/djangoapps/course_modes/models.py#L37">CourseMode</reference>
                permissions be data-driven, rather than being code specific, which would
                allow configuration-time specification of <reference name="CourseMode" refuri="https://github.com/openedx/edx-platform/blob/master/common/djangoapps/course_modes/models.py#L37">CourseMode</reference>, rather than requiring
                the current combination of code and database entries.</paragraph>
        </section>
    </section>
</document>
